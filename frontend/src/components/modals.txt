import { useState } from 'react';
import { Button } from "../ui/button";
import { BaseModal } from "../ui/base-modal";
import { Input } from "../ui/input";
import { 
  FaUser, 
  FaPhone, 
  FaEnvelope, 
  FaCar, 
  FaCalendarAlt, 
  FaClock, 
  FaMapMarkerAlt,
  FaCheck,
  FaTimes,
  FaRedo,
  FaUserTie
} from 'react-icons/fa';

interface AppointmentDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  appointment: {
    id_cita: number;
    fecha: string;
    hora: string;
    lugar: string;
    tipo_cita: string;
    estado: string;
    reagendaciones: number;
    contacto: {
      nombre: string;
      telefono: string;
      correo: string;
    };
    vehiculo?: {
      marca: string;
      modelo: string;
      anio: number;
    };
    empleado: {
      id_empleado: number;
      nombre: string;
    };
  };
  onAttend: () => void;
  onCancel: () => void;
  onReschedule: (newEmployeeId: number) => void;
  employees: Array<{ id_empleado: number; nombre: string; }>;
}

export function AppointmentDetailsModal({
  isOpen,
  onClose,
  appointment,
  onAttend,
  onCancel,
  onReschedule,
  employees
}: AppointmentDetailsModalProps) {
  const [isRescheduling, setIsRescheduling] = useState(false);
  const [selectedEmployeeId, setSelectedEmployeeId] = useState(appointment.empleado.id_empleado);

  const handleCall = () => {
    window.location.href = `tel:${appointment.contacto.telefono}`;
  };

  const handleReschedule = () => {
    if (isRescheduling && selectedEmployeeId) {
      onReschedule(selectedEmployeeId);
      setIsRescheduling(false);
    } else {
      setIsRescheduling(true);
    }
  };

  const getStatusColor = (estado: string) => {
    switch (estado.toLowerCase()) {
      case 'pendiente': return 'bg-yellow-100 text-yellow-800';
      case 'completada': return 'bg-green-100 text-green-800';
      case 'cancelada': return 'bg-red-100 text-red-800';
      case 'reagendada': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <BaseModal
      isOpen={isOpen}
      onClose={onClose}
      title={
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <FaCalendarAlt className="text-gray-500" />
            <span>Detalles de la Cita</span>
          </div>
          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(appointment.estado)}`}>
            {appointment.estado}
          </span>
        </div>
      }
      maxWidth="md"
    >
      <div className="space-y-6">
        {/* Cliente Info */}
        <div className="bg-gray-50 p-4 rounded-lg space-y-3">
          <h3 className="font-medium flex items-center gap-2">
            <FaUser className="text-gray-500" />
            Información del Cliente
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <span className="text-sm text-gray-500">Nombre</span>
              <p className="font-medium">{appointment.contacto.nombre}</p>
            </div>
            <div>
              <span className="text-sm text-gray-500">Teléfono</span>
              <p className="font-medium">{appointment.contacto.telefono}</p>
            </div>
            <div className="md:col-span-2">
              <span className="text-sm text-gray-500">Correo</span>
              <p className="font-medium">{appointment.contacto.correo}</p>
            </div>
          </div>
        </div>

        {/* Appointment Info */}
        <div className="bg-gray-50 p-4 rounded-lg space-y-3">
          <h3 className="font-medium flex items-center gap-2">
            <FaCalendarAlt className="text-gray-500" />
            Información de la Cita
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <span className="text-sm text-gray-500">Fecha</span>
              <p className="font-medium flex items-center gap-2">
                <FaCalendarAlt className="text-gray-400" />
                {appointment.fecha}
              </p>
            </div>
            <div>
              <span className="text-sm text-gray-500">Hora</span>
              <p className="font-medium flex items-center gap-2">
                <FaClock className="text-gray-400" />
                {appointment.hora}
              </p>
            </div>
            <div className="md:col-span-2">
              <span className="text-sm text-gray-500">Lugar</span>
              <p className="font-medium flex items-center gap-2">
                <FaMapMarkerAlt className="text-gray-400" />
                {appointment.lugar}
              </p>
            </div>
            {appointment.vehiculo && (
              <div className="md:col-span-2">
                <span className="text-sm text-gray-500">Vehículo</span>
                <p className="font-medium flex items-center gap-2">
                  <FaCar className="text-gray-400" />
                  {`${appointment.vehiculo.marca} ${appointment.vehiculo.modelo} (${appointment.vehiculo.anio})`}
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Employee Selection for Rescheduling */}
        {isRescheduling && (
          <div className="bg-blue-50 p-4 rounded-lg space-y-3">
            <h3 className="font-medium flex items-center gap-2">
              <FaUserTie className="text-gray-500" />
              Seleccionar Nuevo Empleado
            </h3>
            <select
              value={selectedEmployeeId}
              onChange={(e) => setSelectedEmployeeId(Number(e.target.value))}
              className="w-full border rounded-md p-2"
            >
              {employees.map(emp => (
                <option key={emp.id_empleado} value={emp.id_empleado}>
                  {emp.nombre}
                </option>
              ))}
            </select>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex flex-wrap gap-2">
          <Button
            onClick={onAttend}
            className="flex items-center gap-2 bg-green-600 hover:bg-green-700"
            disabled={appointment.estado === 'completada' || appointment.estado === 'cancelada'}
          >
            <FaCheck />
            Asistió
          </Button>
          <Button
            onClick={handleCall}
            className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700"
          >
            <FaPhone />
            Llamar
          </Button>
          <Button
            onClick={handleReschedule}
            className="flex items-center gap-2 bg-yellow-600 hover:bg-yellow-700"
            disabled={
              appointment.estado === 'completada' || 
              appointment.estado === 'cancelada' || 
              appointment.reagendaciones >= 3
            }
          >
            <FaRedo />
            {isRescheduling ? 'Confirmar Reagendación' : 'Reagendar'}
          </Button>
          <Button
            onClick={onCancel}
            className="flex items-center gap-2 bg-red-600 hover:bg-red-700"
            disabled={appointment.estado === 'completada' || appointment.estado === 'cancelada'}
          >
            <FaTimes />
            Cancelar Cita
          </Button>
        </div>

        {appointment.reagendaciones > 0 && (
          <p className="text-sm text-gray-500">
            Esta cita ha sido reagendada {appointment.reagendaciones} {appointment.reagendaciones === 1 ? 'vez' : 'veces'}
          </p>
        )}
      </div>
    </BaseModal>
  );
}import { useState } from 'react';
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { BaseModal } from "../ui/base-modal";
import { 
  FaUser, 
  FaCar, 
  FaCalendar, 
  FaClock, 
  FaMapMarkerAlt, 
  FaClipboardList 
} from 'react-icons/fa';

interface Appointment {
  id_cita?: number;
  id_empleado_creador: number;
  id_contacto: number;
  id_vehiculo?: number;
  tipo_cita: string;
  fecha: string;
  hora: string;
  lugar: string;
  reagendaciones: number;
}

interface AppointmentModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (appointment: Omit<Appointment, 'id_cita'>) => void;
  appointment?: Appointment;
  currentEmployeeId: number;
}

export function AppointmentModal({ 
  isOpen, 
  onClose, 
  onSave, 
  appointment,
  currentEmployeeId
}: AppointmentModalProps) {
  const [formData, setFormData] = useState({
    id_empleado_creador: appointment?.id_empleado_creador || currentEmployeeId,
    id_contacto: appointment?.id_contacto || '',
    id_vehiculo: appointment?.id_vehiculo || '',
    tipo_cita: appointment?.tipo_cita || '',
    fecha: appointment?.fecha || '',
    hora: appointment?.hora || '',
    lugar: appointment?.lugar || '',
    reagendaciones: appointment?.reagendaciones || 0,
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const appointmentData = {
      id_empleado_creador: Number(formData.id_empleado_creador),
      id_contacto: Number(formData.id_contacto),
      id_vehiculo: formData.id_vehiculo ? Number(formData.id_vehiculo) : undefined,
      tipo_cita: formData.tipo_cita,
      fecha: formData.fecha,
      hora: formData.hora,
      lugar: formData.lugar,
      reagendaciones: Number(formData.reagendaciones)
    };

    onSave(appointmentData);
    onClose();
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const isValidDate = (date: string) => {
    const selectedDate = new Date(date);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    return selectedDate >= today;
  };

  const isValidTime = (time: string) => {
    if (!time) return false;
    const [hours, minutes] = time.split(':').map(Number);
    return hours >= 9 && (hours < 18 || (hours === 18 && minutes === 0));
  };

  const canReschedule = formData.reagendaciones < 3;

  return (
    <BaseModal
      isOpen={isOpen}
      onClose={onClose}
      title={
        <div className="flex items-center gap-2">
          <FaCalendar className="text-gray-500" />
          {appointment ? 'Editar Cita' : 'Nueva Cita'}
        </div>
      }
      maxWidth="md"
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="text-sm font-medium flex items-center gap-2">
              <FaUser className="text-gray-500" />
              Contacto
            </label>
            <Input
              name="id_contacto"
              type="number"
              value={formData.id_contacto}
              onChange={handleChange}
              required
              placeholder="ID del contacto"
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium flex items-center gap-2">
              <FaCar className="text-gray-500" />
              Vehículo (Opcional)
            </label>
            <Input
              name="id_vehiculo"
              type="number"
              value={formData.id_vehiculo}
              onChange={handleChange}
              placeholder="ID del vehículo"
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium flex items-center gap-2">
              <FaClipboardList className="text-gray-500" />
              Tipo de Cita
            </label>
            <select
              name="tipo_cita"
              value={formData.tipo_cita}
              onChange={handleChange}
              required
              className="w-full border rounded-md p-2"
            >
              <option value="" disabled>Seleccionar tipo</option>
              <option value="venta">Venta</option>
              <option value="revision">Revisión</option>
              <option value="entrega">Entrega</option>
              <option value="seguimiento">Seguimiento</option>
            </select>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium flex items-center gap-2">
              <FaCalendar className="text-gray-500" />
              Fecha
            </label>
            <Input
              name="fecha"
              type="date"
              value={formData.fecha}
              onChange={handleChange}
              required
              min={new Date().toISOString().split('T')[0]}
            />
            {formData.fecha && !isValidDate(formData.fecha) && (
              <p className="text-sm text-red-500">
                La fecha debe ser igual o posterior a hoy
              </p>
            )}
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium flex items-center gap-2">
              <FaClock className="text-gray-500" />
              Hora
            </label>
            <Input
              name="hora"
              type="time"
              value={formData.hora}
              onChange={handleChange}
              required
              min="09:00"
              max="18:00"
              step="900"
            />
            {formData.hora && !isValidTime(formData.hora) && (
              <p className="text-sm text-red-500">
                El horario debe estar entre 9:00 y 18:00
              </p>
            )}
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium flex items-center gap-2">
              <FaMapMarkerAlt className="text-gray-500" />
              Lugar
            </label>
            <Input
              name="lugar"
              value={formData.lugar}
              onChange={handleChange}
              required
              placeholder="Dirección o lugar de la cita"
            />
          </div>

          {appointment && (
            <div className="space-y-2">
              <label className="text-sm font-medium flex items-center gap-2">
                <FaClipboardList className="text-gray-500" />
                Reagendaciones
              </label>
              <Input
                name="reagendaciones"
                type="number"
                value={formData.reagendaciones}
                disabled
                className="bg-gray-50"
              />
              {!canReschedule && (
                <p className="text-sm text-red-500">
                  No se pueden hacer más reagendaciones
                </p>
              )}
            </div>
          )}
        </div>

        <div className="flex justify-end gap-2">
          <Button type="button" variant="outline" onClick={onClose}>
            Cancelar
          </Button>
          <Button 
            type="submit"
            disabled={
              !isValidDate(formData.fecha) || 
              !isValidTime(formData.hora) ||
              (appointment && !canReschedule)
            }
          >
            {appointment ? 'Guardar Cambios' : 'Crear Cita'}
          </Button>
        </div>
      </form>
    </BaseModal>
  );
}import { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

interface Credit {
  id_credito: number;
  id_cliente: number;
  cantidad: number;
  comentarios?: string;
  id_documento?: number;
  id_vehiculo?: number;
}

interface CreditModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (credit: Omit<Credit, 'id_credito'>) => void;
  credit?: Credit;
}

export function CreditsModal({ 
  isOpen, 
  onClose, 
  onSave, 
  credit 
}: CreditModalProps) {
  const [formData, setFormData] = useState({
    id_cliente: '',
    cantidad: '',
    comentarios: '',
    id_documento: '',
    id_vehiculo: '',
  });

  // Effect to update form when selected credit changes
  useEffect(() => {
    if (credit) {
      setFormData({
        id_cliente: credit.id_cliente.toString(),
        cantidad: credit.cantidad.toString(),
        comentarios: credit.comentarios || '',
        id_documento: credit.id_documento?.toString() || '',
        id_vehiculo: credit.id_vehiculo?.toString() || '',
      });
    } else {
      // Reset form if no credit is selected
      setFormData({
        id_cliente: '',
        cantidad: '',
        comentarios: '',
        id_documento: '',
        id_vehiculo: '',
      });
    }
  }, [credit, isOpen]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Convert to numbers and save
    const creditData = {
      id_cliente: Number(formData.id_cliente),
      cantidad: Number(formData.cantidad),
      comentarios: formData.comentarios || undefined,
      id_documento: formData.id_documento ? Number(formData.id_documento) : undefined,
      id_vehiculo: formData.id_vehiculo ? Number(formData.id_vehiculo) : undefined
    };

    onSave(creditData);
    onClose();
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px]">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle>
              {credit ? 'Editar Crédito' : 'Nuevo Crédito'}
            </DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <label htmlFor="id_cliente" className="text-sm font-medium">
                  ID Cliente
                </label>
                <Input
                  id="id_cliente"
                  name="id_cliente"
                  type="number"
                  value={formData.id_cliente}
                  onChange={handleChange}
                  required
                />
              </div>
              <div className="space-y-2">
                <label htmlFor="cantidad" className="text-sm font-medium">
                  Cantidad
                </label>
                <Input
                  id="cantidad"
                  name="cantidad"
                  type="number"
                  min="0"
                  step="0.01"
                  value={formData.cantidad}
                  onChange={handleChange}
                  required
                />
              </div>
              <div className="space-y-2">
                <label htmlFor="id_documento" className="text-sm font-medium">
                  ID Documento (Opcional)
                </label>
                <Input
                  id="id_documento"
                  name="id_documento"
                  type="number"
                  value={formData.id_documento}
                  onChange={handleChange}
                />
              </div>
              <div className="space-y-2">
                <label htmlFor="id_vehiculo" className="text-sm font-medium">
                  ID Vehículo (Opcional)
                </label>
                <Input
                  id="id_vehiculo"
                  name="id_vehiculo"
                  type="number"
                  value={formData.id_vehiculo}
                  onChange={handleChange}
                />
              </div>
              <div className="col-span-full space-y-2">
                <label htmlFor="comentarios" className="text-sm font-medium">
                  Comentarios
                </label>
                <Input
                  id="comentarios"
                  name="comentarios"
                  value={formData.comentarios}
                  onChange={handleChange}
                  placeholder="Comentarios adicionales (opcional)"
                />
              </div>
            </div>
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={onClose}>
              Cancelar
            </Button>
            <Button type="submit">
              {credit ? 'Guardar Cambios' : 'Agregar Crédito'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}import { useState } from 'react';
import * as Dialog from '@radix-ui/react-dialog';

interface CustomIdentificationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (identificationType: string) => void;
}

export function CustomIdentificationModal({ 
  isOpen, 
  onClose, 
  onSave 
}: CustomIdentificationModalProps) {
  const [customType, setCustomType] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (customType.trim()) {
      onSave(customType.trim());
      setCustomType('');
      onClose();
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    e.stopPropagation();
    setCustomType(e.target.value);
  };

  const handleClose = () => {
    setCustomType('');
    onClose();
  };

  return (
    <Dialog.Root open={isOpen} onOpenChange={handleClose}>
      <Dialog.Portal>
        <Dialog.Overlay className="fixed inset-0 bg-black/50 animate-fade-in" />
        <Dialog.Content 
          className="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg p-6 w-full max-w-[425px] shadow-lg animate-slide-up"
          onPointerDownOutside={(e) => {
            e.preventDefault();
          }}
        >
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <Dialog.Title className="text-lg font-semibold">
                Ingrese el Tipo de Identificación
              </Dialog.Title>
            </div>
            <div className="py-4">
              <input
                className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Escriba el tipo de identificación"
                value={customType}
                onChange={handleInputChange}
                onClick={(e: React.MouseEvent) => e.stopPropagation()}
                required
              />
            </div>
            <div className="flex justify-end gap-2 mt-4">
              <button
                type="button"
                className="px-4 py-2 border rounded-md hover:bg-gray-100"
                onClick={handleClose}
              >
                Cancelar
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
              >
                Guardar
              </button>
            </div>
          </form>
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  );
}import { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { IdentificationHelper } from '../helpers/IdentificationHelper';
import { Cliente, CreateClienteDto } from '@/services/cliente.service';
import { documentoService, Documento } from '@/services/documento.service';
import { toast } from '@/components/ui/use-toast';
import { DocumentChecklist } from '../DocumentChecklist';

interface TipoIdentificacion {
  id: number;
  nombre: string;
  descripcion?: string;
}

type TipoPersona = "Física" | "Moral";

interface FormData {
  nombre: string;
  curp: string | undefined;
  idTipoIdentificacion: string;
  numIdentificacion: string;
  fechaNacimiento: string;
  telefono: string;
  correo: string;
  domicilio: string;
  tipoPersona: TipoPersona;
  representanteLegal?: string;
  razonSocial?: string;
  rfc?: string;
  fechaConstitucion?: string;
  regimenFiscal?: string;
}

interface CustomerModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (cliente: CreateClienteDto) => Promise<Cliente>;
  customer?: Cliente;
  tiposIdentificacion: TipoIdentificacion[];
}

interface DocumentWithDescription {
  file: File;
  description: string;
  id?: number;
}

export function CustomerModal({
  isOpen,
  onClose,
  onSave,
  customer,
  tiposIdentificacion = []
}: CustomerModalProps) {
  const [formData, setFormData] = useState<FormData>({
    nombre: "",
    curp: "",
    idTipoIdentificacion: "",
    numIdentificacion: "",
    fechaNacimiento: "",
    telefono: "",
    correo: "",
    domicilio: "",
    tipoPersona: "Física",
    representanteLegal: "",
    razonSocial: "",
    rfc: "",
    fechaConstitucion: "",
    regimenFiscal: ""
  });

  const [documents, setDocuments] = useState<DocumentWithDescription[]>([]);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    if (customer) {
      setFormData({
        nombre: customer.nombre,
        curp: customer.curp || "",
        idTipoIdentificacion: customer.idTipoIdentificacion?.toString() || "",
        numIdentificacion: customer.numIdentificacion,
        fechaNacimiento: customer.fechaNacimiento 
          ? new Date(customer.fechaNacimiento).toISOString().split("T")[0]
          : "",
        telefono: customer.telefono,
        correo: customer.correo,
        domicilio: customer.domicilio,
        tipoPersona: customer.tipoPersona,
        representanteLegal: customer.representanteLegal || "",
        razonSocial: customer.razonSocial || "",
        rfc: customer.rfc || "",
        fechaConstitucion: customer.fechaConstitucion
          ? new Date(customer.fechaConstitucion).toISOString().split("T")[0]
          : "",
        regimenFiscal: customer.regimenFiscal || ""
      });
    } else {
      setFormData({
        nombre: "",
        curp: "",
        idTipoIdentificacion: "",
        numIdentificacion: "",
        fechaNacimiento: "",
        telefono: "",
        correo: "",
        domicilio: "",
        tipoPersona: "Física",
        representanteLegal: "",
        razonSocial: "",
        rfc: "",
        fechaConstitucion: "",
        regimenFiscal: ""
      });
    }
    setErrors({});
    setDocuments([]);
  }, [customer, isOpen]);

  const validateCURP = (curp: string) => {
    const curpRegex = /^[A-Z]{4}[0-9]{6}[HM][A-Z]{5}[0-9A-Z][0-9]$/;
    return curpRegex.test(curp);
  };

  const validateRFC = (rfc: string) => {
    const rfcRegex = /^[A-Z&Ñ]{3,4}[0-9]{6}[A-Z0-9]{3}$/;
    return rfcRegex.test(rfc);
  };

  const validatePhone = (phone: string) => {
    const phoneRegex = /^[\d\s()+-]{10,15}$/;
    return phoneRegex.test(phone);
  };

  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    if (name === "tipoPersona") {
      const tipoPersonaValue = value as TipoPersona;
      if (tipoPersonaValue === "Física" || tipoPersonaValue === "Moral") {
        setIsTransitioning(true);
        setTimeout(() => {
          setFormData(prev => ({ 
            ...prev, 
            tipoPersona: tipoPersonaValue,
            rfc: "",
            curp: tipoPersonaValue === "Moral" ? undefined : "",
            razonSocial: tipoPersonaValue === "Moral" ? "" : undefined,
            representanteLegal: tipoPersonaValue === "Moral" ? "" : undefined,
            fechaConstitucion: tipoPersonaValue === "Moral" ? "" : undefined,
            regimenFiscal: tipoPersonaValue === "Moral" ? "" : undefined
          }));
          setIsTransitioning(false);
        }, 150);
      }
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));

      if (errors[name]) {
        setErrors(prev => {
          const newErrors = { ...prev };
          delete newErrors[name];
          return newErrors;
        });
      }
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    const isMoral = formData.tipoPersona === "Moral";

    // Validaciones comunes
    if (!formData.nombre.trim()) {
      newErrors.nombre = "El nombre es requerido";
    }

    if (!formData.idTipoIdentificacion) {
      newErrors.idTipoIdentificacion = "El tipo de identificación es requerido";
    }

    if (!formData.numIdentificacion) {
      newErrors.numIdentificacion = "El número de identificación es requerido";
    } else if (formData.numIdentificacion.length < 5) {
      newErrors.numIdentificacion = "El número de identificación debe tener al menos 5 caracteres";
    }

    if (!formData.telefono) {
      newErrors.telefono = "El teléfono es requerido";
    } else if (!validatePhone(formData.telefono)) {
      newErrors.telefono = "El formato del teléfono no es válido";
    }

    if (!formData.correo) {
      newErrors.correo = "El correo es requerido";
    } else if (!validateEmail(formData.correo)) {
      newErrors.correo = "El formato del correo no es válido";
    }

    if (!formData.domicilio.trim()) {
      newErrors.domicilio = "El domicilio es requerido";
    } else if (formData.domicilio.length < 10) {
      newErrors.domicilio = "El domicilio debe ser más detallado";
    }

    // Validaciones específicas por tipo de persona
    if (isMoral) {
      if (!formData.razonSocial) {
        newErrors.razonSocial = "La razón social es requerida";
      }
      if (!formData.rfc) {
        newErrors.rfc = "El RFC es requerido";
      } else if (!validateRFC(formData.rfc)) {
        newErrors.rfc = "El formato del RFC no es válido";
      }
      if (!formData.fechaConstitucion) {
        newErrors.fechaConstitucion = "La fecha de constitución es requerida";
      }
      if (!formData.regimenFiscal) {
        newErrors.regimenFiscal = "El régimen fiscal es requerido";
      }
      if (!formData.representanteLegal) {
        newErrors.representanteLegal = "El representante legal es requerido";
      }
      if (documents.length === 0) {
        newErrors.documentos = "Debe subir al menos un documento";
      }
    } else {
      if (!formData.curp) {
        newErrors.curp = "El CURP es requerido";
      } else if (!validateCURP(formData.curp)) {
        newErrors.curp = "El formato del CURP no es válido";
      }
      if (!formData.fechaNacimiento) {
        newErrors.fechaNacimiento = "La fecha de nacimiento es requerida";
      }
      if (formData.rfc && !validateRFC(formData.rfc)) {
        newErrors.rfc = "El formato del RFC no es válido";
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleDocumentsChange = (newDocuments: DocumentWithDescription[]) => {
    setDocuments(newDocuments);
  };

  const uploadDocuments = async () => {
    try {
      const uploadPromises = documents.map(doc => 
        documentoService.crearDocumento({
          nombre: doc.file.name,
          tipo: doc.file.type,
          archivo: doc.file
        })
      );

      const uploadedDocs = await Promise.all(uploadPromises);
      return uploadedDocs;
    } catch (error) {
      console.error('Error al subir documentos:', error);
      throw error;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      toast({
        title: "Error de validación",
        description: "Por favor, corrija los errores en el formulario",
        variant: "destructive"
      });
      return;
    }

    setIsSubmitting(true);

    try {
      // Primero subir los documentos
      let uploadedDocuments: Documento[] = [];
      if (documents.length > 0) {
        uploadedDocuments = await uploadDocuments();
      }

      const dataToSend: CreateClienteDto = {
        ...formData,
        idTipoIdentificacion: parseInt(formData.idTipoIdentificacion),
        fechaNacimiento: new Date(formData.fechaNacimiento),
        fechaConstitucion: formData.fechaConstitucion ? new Date(formData.fechaConstitucion) : undefined,
        rfc: formData.tipoPersona === "Física" ? (formData.rfc || undefined) : formData.rfc,
        razonSocial: formData.tipoPersona === "Moral" ? formData.razonSocial : undefined,
        representanteLegal: formData.tipoPersona === "Moral" ? formData.representanteLegal : undefined,
        regimenFiscal: formData.tipoPersona === "Moral" ? formData.regimenFiscal : undefined,
        curp: formData.tipoPersona === "Moral" ? "" : formData.curp || "",
        actaConstitutivaUrl: uploadedDocuments.find(doc => doc.tipo === 'application/pdf')?.url,
        poderNotarialUrl: uploadedDocuments.find(doc => doc.tipo === 'application/pdf')?.url,
        comprobanteDomicilioUrl: uploadedDocuments.find(doc => doc.tipo.startsWith('image/'))?.url
      };

      const savedCliente = await onSave(dataToSend);

      // Actualizar los documentos con el ID del cliente
      if (uploadedDocuments.length > 0) {
        await Promise.all(uploadedDocuments.map(doc =>
          documentoService.actualizarDocumento(doc.id, {
            nombre: doc.nombre,
            tipo: doc.tipo,
            estado: 'pendiente'
          })
        ));
      }

      toast({
        title: "Éxito",
        description: `Cliente ${customer ? 'actualizado' : 'creado'} correctamente`,
      });

      onClose();
    } catch (error: any) {
      // Si hay error, intentar eliminar los documentos subidos
      if (documents.length > 0) {
        try {
          await Promise.all(documents.map(doc =>
            doc.id ? documentoService.eliminarDocumento(doc.id) : Promise.resolve()
          ));
        } catch (cleanupError) {
          console.error('Error al limpiar documentos:', cleanupError);
        }
      }

      if (error.response?.data?.errors) {
        const serverErrors: Record<string, string> = {};
        error.response.data.errors.forEach((err: any) => {
          serverErrors[err.field] = err.message;
        });
        setErrors(serverErrors);
        toast({
          title: "Error",
          description: "Por favor, corrija los errores señalados",
          variant: "destructive"
        });
      } else {
        toast({
          title: "Error",
          description: error.response?.data?.message || `Error al ${customer ? 'actualizar' : 'crear'} el cliente`,
          variant: "destructive"
        });
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[700px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {customer ? "Editar Cliente" : "Nuevo Cliente"}
          </DialogTitle>
          <DialogDescription>
            {customer 
              ? "Actualice la información del cliente y sus documentos" 
              : "Complete el formulario para registrar un nuevo cliente. Los campos marcados con * son obligatorios."}
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label htmlFor="tipoPersona" className="text-sm font-medium">
                Tipo de Persona *
              </label>
              <select
                id="tipoPersona"
                name="tipoPersona"
                value={formData.tipoPersona}
                onChange={handleChange}
                required
                className="w-full border rounded-md p-2"
              >
                <option value="Física">Persona Física</option>
                <option value="Moral">Persona Moral</option>
              </select>
            </div>

            <div className="space-y-2">
              <label htmlFor="nombre" className="text-sm font-medium">
                {formData.tipoPersona === "Moral" ? "Nombre Comercial" : "Nombre Completo"} *
              </label>
              <Input
                id="nombre"
                name="nombre"
                value={formData.nombre}
                onChange={handleChange}
                required
                className={errors.nombre ? "border-red-500" : ""}
              />
              {errors.nombre && (
                <p className="text-red-500 text-sm">{errors.nombre}</p>
              )}
            </div>

            {formData.tipoPersona === "Moral" && (
              <>
                <div className="space-y-2">
                  <label htmlFor="razonSocial" className="text-sm font-medium">
                    Razón Social *
                  </label>
                  <Input
                    id="razonSocial"
                    name="razonSocial"
                    value={formData.razonSocial}
                    onChange={handleChange}
                    required
                    className={errors.razonSocial ? "border-red-500" : ""}
                  />
                  {errors.razonSocial && (
                    <p className="text-red-500 text-sm">{errors.razonSocial}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label htmlFor="representanteLegal" className="text-sm font-medium">
                    Representante Legal *
                  </label>
                  <Input
                    id="representanteLegal"
                    name="representanteLegal"
                    value={formData.representanteLegal}
                    onChange={handleChange}
                    required
                    className={errors.representanteLegal ? "border-red-500" : ""}
                  />
                  {errors.representanteLegal && (
                    <p className="text-red-500 text-sm">{errors.representanteLegal}</p>
                  )}
                </div>
              </>
            )}

            {formData.tipoPersona === "Física" ? (
              <>
                <div className="space-y-2">
                  <label htmlFor="curp" className="text-sm font-medium">
                    CURP *
                  </label>
                  <Input
                    id="curp"
                    name="curp"
                    value={formData.curp}
                    onChange={handleChange}
                    required
                    maxLength={18}
                    className={errors.curp ? "border-red-500" : ""}
                  />
                  {errors.curp && (
                    <p className="text-red-500 text-sm">{errors.curp}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label htmlFor="fechaNacimiento" className="text-sm font-medium">
                    Fecha de Nacimiento *
                  </label>
                  <Input
                    id="fechaNacimiento"
                    name="fechaNacimiento"
                    type="date"
                    value={formData.fechaNacimiento}
                    onChange={handleChange}
                    required
                    max={new Date().toISOString().split("T")[0]}
                    className={errors.fechaNacimiento ? "border-red-500" : ""}
                  />
                  {errors.fechaNacimiento && (
                    <p className="text-red-500 text-sm">{errors.fechaNacimiento}</p>
                  )}
                </div>
              </>
            ) : (
              <>
                <div className="space-y-2">
                  <label htmlFor="fechaConstitucion" className="text-sm font-medium">
                    Fecha de Constitución *
                  </label>
                  <Input
                    id="fechaConstitucion"
                    name="fechaConstitucion"
                    type="date"
                    value={formData.fechaConstitucion}
                    onChange={handleChange}
                    required
                    max={new Date().toISOString().split("T")[0]}
                    className={errors.fechaConstitucion ? "border-red-500" : ""}
                  />
                  {errors.fechaConstitucion && (
                    <p className="text-red-500 text-sm">{errors.fechaConstitucion}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <label htmlFor="regimenFiscal" className="text-sm font-medium">
                    Régimen Fiscal *
                  </label>
                  <Input
                    id="regimenFiscal"
                    name="regimenFiscal"
                    value={formData.regimenFiscal}
                    onChange={handleChange}
                    required
                    className={errors.regimenFiscal ? "border-red-500" : ""}
                  />
                  {errors.regimenFiscal && (
                    <p className="text-red-500 text-sm">{errors.regimenFiscal}</p>
                  )}
                </div>
              </>
            )}

            <div className="space-y-2">
              <label htmlFor="rfc" className="text-sm font-medium">
                RFC {formData.tipoPersona === "Moral" ? "*" : "(Opcional)"}
              </label>
              <Input
                id="rfc"
                name="rfc"
                value={formData.rfc}
                onChange={handleChange}
                required={formData.tipoPersona === "Moral"}
                maxLength={13}
                className={errors.rfc ? "border-red-500" : ""}
              />
              {errors.rfc && (
                <p className="text-red-500 text-sm">{errors.rfc}</p>
              )}
            </div>

            <div className="space-y-2">
              <label htmlFor="idTipoIdentificacion" className="text-sm font-medium">
                Tipo de Identificación *
              </label>
              <select
                id="idTipoIdentificacion"
                name="idTipoIdentificacion"
                value={formData.idTipoIdentificacion}
                onChange={handleChange}
                required
                className={`w-full border rounded-md p-2 ${
                  errors.idTipoIdentificacion ? "border-red-500" : ""
                }`}
              >
                <option value="">Seleccione...</option>
                {tiposIdentificacion.map((tipo) => (
                  <option key={tipo.id} value={tipo.id}>
                    {tipo.nombre}
                  </option>
                ))}
              </select>
              {errors.idTipoIdentificacion && (
                <p className="text-red-500 text-sm">{errors.idTipoIdentificacion}</p>
              )}
            </div>

            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <label htmlFor="numIdentificacion" className="text-sm font-medium">
                  Número de Identificación *
                </label>
                <IdentificationHelper selectedType={formData.idTipoIdentificacion} />
              </div>
              <Input
                id="numIdentificacion"
                name="numIdentificacion"
                value={formData.numIdentificacion}
                onChange={handleChange}
                required
                className={errors.numIdentificacion ? "border-red-500" : ""}
              />
              {errors.numIdentificacion && (
                <p className="text-red-500 text-sm">{errors.numIdentificacion}</p>
              )}
            </div>

            <div className="space-y-2">
              <label htmlFor="telefono" className="text-sm font-medium">
                Teléfono *
              </label>
              <Input
                id="telefono"
                name="telefono"
                value={formData.telefono}
                onChange={handleChange}
                required
                className={errors.telefono ? "border-red-500" : ""}
              />
              {errors.telefono && (
                <p className="text-red-500 text-sm">{errors.telefono}</p>
              )}
            </div>

            <div className="space-y-2">
              <label htmlFor="correo" className="text-sm font-medium">
                Correo Electrónico *
              </label>
              <Input
                id="correo"
                name="correo"
                type="email"
                value={formData.correo}
                onChange={handleChange}
                required
                className={errors.correo ? "border-red-500" : ""}
              />
              {errors.correo && (
                <p className="text-red-500 text-sm">{errors.correo}</p>
              )}
            </div>

            <div className="md:col-span-2 space-y-2">
              <label htmlFor="domicilio" className="text-sm font-medium">
                Domicilio *
              </label>
              <Input
                id="domicilio"
                name="domicilio"
                value={formData.domicilio}
                onChange={handleChange}
                required
                className={errors.domicilio ? "border-red-500" : ""}
              />
              {errors.domicilio && (
                <p className="text-red-500 text-sm">{errors.domicilio}</p>
              )}
            </div>

            <div className="md:col-span-2">
              <DocumentChecklist
                tipoPersona={formData.tipoPersona}
                onDocumentsChange={handleDocumentsChange}
              />
              {errors.documentos && (
                <p className="text-red-500 text-sm mt-2">{errors.documentos}</p>
              )}
            </div>
          </div>

          <DialogFooter className="gap-2 sm:gap-0">
            <Button type="button" variant="outline" onClick={onClose}>
              Cancelar
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? "Guardando..." : customer ? "Guardar Cambios" : "Crear Cliente"}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}import { useState, useRef, ChangeEvent } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "../../components/ui/dialog";
import { Button } from "../../components/ui/button";
import { Alert } from "../../components/ui/alert";
import { FileText, Scan, AlertTriangle, CheckCircle2, Loader2 } from 'lucide-react';
import documentoService from '../../services/documento.service';
import { toast } from '../../components/ui/use-toast';

interface DocumentsModalProps {
  isOpen: boolean;
  onClose: () => void;
  transactionId: number;
  onUpdateStatus?: (transactionId: number) => void;
}

export function DocumentsModal({ 
  isOpen, 
  onClose, 
  transactionId,
  onUpdateStatus 
}: DocumentsModalProps) {
  const [pdfAttempts, setPdfAttempts] = useState(0);
  const [showSignatureConfirm, setShowSignatureConfirm] = useState(false);
  const [isScanning, setIsScanning] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [currentDocumentId, setCurrentDocumentId] = useState<number | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleGeneratePdf = async () => {
    if (pdfAttempts < 3) {
      try {
        const response = await documentoService.generarCompraVentaPdf(transactionId);
        const link = document.createElement('a');
        link.href = response.url;
        link.download = response.filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        setPdfAttempts(prev => prev + 1);
      } catch (error) {
        console.error('Error al generar PDF:', error);
        toast({
          title: "Error",
          description: "No se pudo generar el PDF",
          variant: "destructive"
        });
      }
    }
  };

  const handleScanDocuments = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (event: ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    setIsScanning(true);
    try {
      const documentos = await documentoService.escanearDocumentos(transactionId, Array.from(files));
      if (documentos.length > 0) {
        setCurrentDocumentId(documentos[0].id);
        setShowSignatureConfirm(true);
      }
    } catch (error) {
      console.error('Error al escanear documentos:', error);
      toast({
        title: "Error",
        description: "No se pudieron procesar los documentos",
        variant: "destructive"
      });
    } finally {
      setIsScanning(false);
    }
  };

  const handleSignatureConfirm = async (isValid: boolean) => {
    if (isValid && currentDocumentId) {
      setShowSignatureConfirm(false);
      setIsUploading(true);
      try {
        const isValidSignature = await documentoService.validarFirma(currentDocumentId);
        if (isValidSignature) {
          setShowSuccess(true);
          if (onUpdateStatus) {
            onUpdateStatus(transactionId);
          }
          setTimeout(() => {
            setShowSuccess(false);
            onClose();
          }, 1500);
        } else {
          toast({
            title: "Error",
            description: "La firma no es válida",
            variant: "destructive"
          });
          if (pdfAttempts < 3) {
            handleGeneratePdf();
          }
        }
      } catch (error) {
        console.error('Error al validar firma:', error);
        toast({
          title: "Error",
          description: "No se pudo validar la firma",
          variant: "destructive"
        });
      } finally {
        setIsUploading(false);
      }
    } else {
      setShowSignatureConfirm(false);
      if (pdfAttempts < 3) {
        handleGeneratePdf();
      }
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Documentos de la Transacción</DialogTitle>
        </DialogHeader>

        <div className="space-y-4 py-4">
          {pdfAttempts >= 3 && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              Se ha alcanzado el límite de intentos para generar el PDF
            </Alert>
          )}

          {!isUploading && !showSuccess && (
            <div className="space-y-4">
              <Button
                className="w-full"
                onClick={handleGeneratePdf}
                disabled={pdfAttempts >= 3}
              >
                <FileText className="mr-2 h-4 w-4" />
                Generar Compraventa
                {pdfAttempts > 0 && ` (${pdfAttempts}/3)`}
              </Button>

              <Button
                className="w-full"
                onClick={handleScanDocuments}
                disabled={isScanning}
              >
                <Scan className="mr-2 h-4 w-4" />
                {isScanning ? 'Escaneando...' : 'Escanear Documentos'}
              </Button>

              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileChange}
                multiple
                accept=".pdf,.jpg,.jpeg,.png"
                className="hidden"
              />
            </div>
          )}

          {showSignatureConfirm && (
            <div className="space-y-4 border rounded-lg p-4">
              <p className="text-center font-medium">
                ¿La firma en el documento es correcta?
              </p>
              <div className="flex justify-center space-x-4">
                <Button
                  variant="default"
                  onClick={() => handleSignatureConfirm(true)}
                >
                  Sí, Guardar
                </Button>
                <Button
                  variant="destructive"
                  onClick={() => handleSignatureConfirm(false)}
                >
                  No, Generar Nuevo
                </Button>
              </div>
            </div>
          )}

          {isUploading && (
            <div className="flex flex-col items-center justify-center space-y-4 py-8">
              <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
              <p className="text-sm text-gray-500">Procesando documentos...</p>
            </div>
          )}

          {showSuccess && (
            <div className="flex flex-col items-center justify-center space-y-4 py-8">
              <CheckCircle2 className="h-8 w-8 text-green-600" />
              <p className="text-sm text-gray-500">¡Documentos guardados exitosamente!</p>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}import { useState, useEffect, useRef } from 'react';
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { BaseModal } from "../ui/base-modal";
import { toast } from "../ui/use-toast";
import {
  FileText,
  Upload,
  CheckCircle2,
  Circle,
  UserSquare2,
  Home,
  GraduationCap,
  UserRound,
  ScrollText,
  Binary,
  Check,
  X,
  Scan
} from 'lucide-react';

import { empleadoService, IEmpleado, IUsuarioEmpleado } from '../../services/empleado.service';
import { rolUsuarioService, RolUsuario } from '../../services/rol-usuario.service';
import { tipoIdentificacionService, TipoIdentificacion } from '../../services/tipo-identificacion.service';
import { documentoService, Documento, CreateDocumentoDto } from '../../services/documento.service';

interface EmployeeModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (data: { usuario: IUsuarioEmpleado; empleado: Omit<IEmpleado, 'id' | 'usuario' | 'numEmpleado'> }) => void;
  employee?: IEmpleado;
}

interface EmployeeFormData {
  correo: string;
  id_rol: number;
  password?: string;
  nombre: string;
  idTipoIdentificacion: number;
  numIdentificacion: string;
  curp: string;
  fechaNacimiento: string;
  telefono: string;
  domicilio: string;
  fechaContratacion: string;
}

interface DocumentoStatus {
  id: string;
  subido: boolean;
  url?: string;
}

const DOCUMENTOS_REQUERIDOS = [
  {
    id: 'cv',
    label: 'CV',
    obligatorio: true,
    icon: ScrollText,
    description: 'Currículum Vitae actualizado'
  },
  {
    id: 'ine',
    label: 'INE',
    obligatorio: true,
    icon: UserSquare2,
    description: 'Identificación oficial vigente'
  },
  {
    id: 'curp',
    label: 'CURP',
    obligatorio: true,
    icon: UserRound,
    description: 'Clave Única de Registro de Población'
  },
  {
    id: 'comprobante_domicilio',
    label: 'Comprobante de Domicilio',
    obligatorio: true,
    icon: Home,
    description: 'No mayor a 3 meses'
  },
  {
    id: 'rfc',
    label: 'RFC',
    obligatorio: false,
    icon: FileText,
    description: 'Registro Federal de Contribuyentes'
  },
  {
    id: 'acta_nacimiento',
    label: 'Acta de Nacimiento',
    obligatorio: true,
    icon: FileText,
    description: 'Original o copia certificada'
  },
  {
    id: 'comprobante_estudios',
    label: 'Comprobante de Estudios',
    obligatorio: false,
    icon: GraduationCap,
    description: 'Título, cédula o certificado'
  }
];

const MIN_DOMICILIO_LENGTH = 10;
const MAX_DOMICILIO_LENGTH = 200;
const MIN_AGE = 18;

export function EmployeeModal({ isOpen, onClose, onSave, employee }: EmployeeModalProps) {
  const [formData, setFormData] = useState<EmployeeFormData>({
    correo: employee?.usuario?.correo || '',
    id_rol: employee?.usuario?.id_rol || 0,
    password: '',
    nombre: employee?.nombre || '',
    idTipoIdentificacion: employee?.idTipoIdentificacion || 0,
    numIdentificacion: employee?.numIdentificacion || '',
    curp: employee?.curp || '',
    fechaNacimiento: employee?.fechaNacimiento ? new Date(employee.fechaNacimiento).toISOString().split('T')[0] : '',
    telefono: employee?.telefono || '',
    domicilio: employee?.domicilio || '',
    fechaContratacion: employee?.fechaContratacion ? new Date(employee.fechaContratacion).toISOString().split('T')[0] : new Date().toISOString().split('T')[0]
  });

  const [roles, setRoles] = useState<RolUsuario[]>([]);
  const [tiposIdentificacion, setTiposIdentificacion] = useState<TipoIdentificacion[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [documentosStatus, setDocumentosStatus] = useState<DocumentoStatus[]>([]);
  const [documentoSeleccionado, setDocumentoSeleccionado] = useState<string>('');
  const [formErrors, setFormErrors] = useState<{ [key: string]: string }>({});
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    const loadCatalogs = async () => {
      try {
        const [rolesData, tiposIdData] = await Promise.all([
          rolUsuarioService.getAll(),
          tipoIdentificacionService.getAll()
        ]);
        setRoles(rolesData);
        setTiposIdentificacion(tiposIdData);
      } catch (error) {
        console.error('Error al cargar catálogos:', error);
        toast({
          title: "Error",
          description: "No se pudieron cargar los catálogos",
          variant: "destructive"
        });
      } finally {
        setIsLoading(false);
      }
    };

    if (isOpen) {
      loadCatalogs();
    }
  }, [isOpen]);

  useEffect(() => {
    const cargarDocumentos = async () => {
      if (employee?.id) {
        try {
          const response = await documentoService.obtenerDocumentosPorEmpleado(employee.id);
          const statusInicial = DOCUMENTOS_REQUERIDOS.map(doc => ({
            id: doc.id,
            subido: response.documentos.some(d => d.tipo === doc.id),
            url: response.documentos.find(d => d.tipo === doc.id)?.url
          }));
          setDocumentosStatus(statusInicial);
        } catch (error: any) {
          console.error('Error al cargar documentos:', error);
          toast({
            title: "Error",
            description: "No se pudieron cargar los documentos del empleado",
            variant: "destructive"
          });
        }
      }
    };

    if (isOpen && employee?.id) {
      cargarDocumentos();
    }
  }, [isOpen, employee?.id]);

  const validateForm = (): boolean => {
    const errors: { [key: string]: string } = {};
    const today = new Date();
    const fechaNacimiento = new Date(formData.fechaNacimiento);
    const fechaContratacion = new Date(formData.fechaContratacion);
    const age = Math.floor((today.getTime() - fechaNacimiento.getTime()) / (365.25 * 24 * 60 * 60 * 1000));

    // Validación de correo
    if (!formData.correo) {
      errors.correo = "El correo es requerido";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.correo)) {
      errors.correo = "El correo no es válido";
    }

    // Validación de rol
    if (!formData.id_rol) {
      errors.id_rol = "El rol es requerido";
    }

    // Validación de contraseña para nuevos empleados
    if (!employee && !formData.password) {
      errors.password = "La contraseña es requerida para nuevos empleados";
    }

    // Validación de nombre
    if (!formData.nombre) {
      errors.nombre = "El nombre es requerido";
    }

    // Validación de tipo de identificación
    if (!formData.idTipoIdentificacion) {
      errors.idTipoIdentificacion = "El tipo de identificación es requerido";
    }

    // Validación de número de identificación
    if (!formData.numIdentificacion) {
      errors.numIdentificacion = "El número de identificación es requerido";
    }

    // Validación de CURP
    if (!formData.curp) {
      errors.curp = "El CURP es requerido";
    } else if (!/^[A-Z]{4}[0-9]{6}[HM][A-Z]{5}[0-9A-Z][0-9]$/.test(formData.curp)) {
      errors.curp = "El CURP no tiene el formato correcto";
    }

    // Validación de fecha de nacimiento
    if (!formData.fechaNacimiento) {
      errors.fechaNacimiento = "La fecha de nacimiento es requerida";
    } else if (age < MIN_AGE) {
      errors.fechaNacimiento = `El empleado debe ser mayor de ${MIN_AGE} años`;
    }

    // Validación de teléfono
    if (!formData.telefono) {
      errors.telefono = "El teléfono es requerido";
    } else if (!/^[0-9]{10}$/.test(formData.telefono)) {
      errors.telefono = "El teléfono debe tener 10 dígitos";
    }

    // Validación de domicilio
    if (!formData.domicilio) {
      errors.domicilio = "El domicilio es requerido";
    } else if (formData.domicilio.length < MIN_DOMICILIO_LENGTH) {
      errors.domicilio = `El domicilio debe tener al menos ${MIN_DOMICILIO_LENGTH} caracteres`;
    } else if (formData.domicilio.length > MAX_DOMICILIO_LENGTH) {
      errors.domicilio = `El domicilio no puede exceder ${MAX_DOMICILIO_LENGTH} caracteres`;
    }

    // Validación de fecha de contratación
    if (!formData.fechaContratacion) {
      errors.fechaContratacion = "La fecha de contratación es requerida";
    } else if (fechaContratacion > today) {
      errors.fechaContratacion = "La fecha de contratación no puede ser futura";
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast({
        title: "Error",
        description: "Por favor, corrija los errores en el formulario",
        variant: "destructive"
      });
      return;
    }

    setIsSaving(true);
    try {
      const { correo, id_rol, password, fechaNacimiento, fechaContratacion, ...restEmpleadoData } = formData;

      // Generar correo único basado en el nombre y timestamp
      const timestamp = Date.now();
      const nombreNormalizado = formData.nombre.toLowerCase().replace(/\s+/g, '.');
      const correoUnico = `${nombreNormalizado}.${timestamp}@cliqueanet.com`;

      const data = {
        usuario: {
          correo: correoUnico,
          id_rol,
          ...(password && { password })
        },
        empleado: {
          ...restEmpleadoData,
          fechaNacimiento: new Date(fechaNacimiento),
          fechaContratacion: new Date(fechaContratacion)
        }
      };

      await onSave(data);
      onClose();
    } catch (error: any) {
      console.error('Error al guardar empleado:', error);
      toast({
        title: "Error",
        description: error.message || "No se pudo guardar el empleado",
        variant: "destructive"
      });
    } finally {
      setIsSaving(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    let newValue: string | number = value;

    if (name === 'idTipoIdentificacion' || name === 'id_rol') {
      newValue = parseInt(value, 10);
    } else if (type === 'number') {
      newValue = parseInt(value, 10);
    }

    setFormData(prev => ({ ...prev, [name]: newValue }));
    // Limpiar el error del campo cuando el usuario empiece a escribir
    if (formErrors[name]) {
      setFormErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const handleFileUpload = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleScanDocument = async (docId: string) => {
    try {
      toast({
        title: "Información",
        description: "Funcionalidad de escaneo en desarrollo",
      });
    } catch (error) {
      console.error('Error al escanear documento:', error);
      toast({
        title: "Error",
        description: "No se pudo escanear el documento",
        variant: "destructive"
      });
    }
  };

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0 || !employee?.id || !documentoSeleccionado) return;

    setIsUploading(true);
    try {
      const archivo = files[0];
      const documentoDto: CreateDocumentoDto = {
        nombre: archivo.name,
        tipo: documentoSeleccionado,
        archivo: archivo,
        id_empleado: employee.id
      };

      const documento = await documentoService.crearDocumento(documentoDto);
      
      setDocumentosStatus(prev => prev.map(doc =>
        doc.id === documentoSeleccionado
          ? { ...doc, subido: true, url: documento.url }
          : doc
      ));

      toast({
        title: "Éxito",
        description: "Documento subido correctamente"
      });

      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
      setDocumentoSeleccionado('');
    } catch (error: any) {
      console.error('Error al subir documento:', error);
      toast({
        title: "Error",
        description: error.message || "No se pudo subir el documento",
        variant: "destructive"
      });
    } finally {
      setIsUploading(false);
    }
  };

  const handleDocumentoClick = (docId: string) => {
    setDocumentoSeleccionado(docId);
    handleFileUpload();
  };

  const modalContent = (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <label htmlFor="correo" className="text-sm font-medium">
            Correo
          </label>
          <Input
            id="correo"
            name="correo"
            type="email"
            value={formData.correo}
            onChange={handleChange}
            required
            className={formErrors.correo ? 'border-red-500' : ''}
          />
          {formErrors.correo && (
            <p className="text-red-500 text-xs">{formErrors.correo}</p>
          )}
        </div>

        <div className="space-y-2">
          <label htmlFor="id_rol" className="text-sm font-medium">
            Rol
          </label>
          <select
            id="id_rol"
            name="id_rol"
            value={formData.id_rol}
            onChange={handleChange}
            required
            className={`w-full p-2 border rounded-md ${formErrors.id_rol ? 'border-red-500' : ''}`}
          >
            <option value="">Seleccione rol</option>
            {roles.map(rol => (
              <option key={rol.id} value={rol.id}>
                {rol.nombre}
              </option>
            ))}
          </select>
          {formErrors.id_rol && (
            <p className="text-red-500 text-xs">{formErrors.id_rol}</p>
          )}
        </div>

        {!employee && (
          <div className="space-y-2">
            <label htmlFor="password" className="text-sm font-medium">
              Contraseña
            </label>
            <Input
              id="password"
              name="password"
              type="password"
              value={formData.password || ''}
              onChange={handleChange}
              required={!employee}
              className={formErrors.password ? 'border-red-500' : ''}
            />
            {formErrors.password && (
              <p className="text-red-500 text-xs">{formErrors.password}</p>
            )}
          </div>
        )}

        <div className="space-y-2">
          <label htmlFor="nombre" className="text-sm font-medium">
            Nombre
          </label>
          <Input
            id="nombre"
            name="nombre"
            value={formData.nombre}
            onChange={handleChange}
            required
            className={formErrors.nombre ? 'border-red-500' : ''}
          />
          {formErrors.nombre && (
            <p className="text-red-500 text-xs">{formErrors.nombre}</p>
          )}
        </div>

        <div className="space-y-2">
          <label htmlFor="idTipoIdentificacion" className="text-sm font-medium">
            Tipo de Identificación
          </label>
          <select
            id="idTipoIdentificacion"
            name="idTipoIdentificacion"
            value={formData.idTipoIdentificacion}
            onChange={handleChange}
            required
            className={`w-full p-2 border rounded-md ${formErrors.idTipoIdentificacion ? 'border-red-500' : ''}`}
          >
            <option value="">Seleccione tipo</option>
            {tiposIdentificacion.map(tipo => (
              <option key={tipo.id} value={tipo.id}>
                {tipo.nombre}
              </option>
            ))}
          </select>
          {formErrors.idTipoIdentificacion && (
            <p className="text-red-500 text-xs">{formErrors.idTipoIdentificacion}</p>
          )}
        </div>

        <div className="space-y-2">
          <label htmlFor="numIdentificacion" className="text-sm font-medium">
            Número de Identificación
          </label>
          <Input
            id="numIdentificacion"
            name="numIdentificacion"
            value={formData.numIdentificacion}
            onChange={handleChange}
            required
            className={formErrors.numIdentificacion ? 'border-red-500' : ''}
          />
          {formErrors.numIdentificacion && (
            <p className="text-red-500 text-xs">{formErrors.numIdentificacion}</p>
          )}
        </div>

        <div className="space-y-2">
          <label htmlFor="curp" className="text-sm font-medium">
            CURP
          </label>
          <Input
            id="curp"
            name="curp"
            value={formData.curp}
            onChange={handleChange}
            required
            maxLength={18}
            pattern="^[A-Z]{4}[0-9]{6}[HM][A-Z]{5}[0-9A-Z][0-9]$"
            title="CURP válida (formato: AAAA000000AAAAAA00)"
            className={`font-mono ${formErrors.curp ? 'border-red-500' : ''}`}
          />
          {formErrors.curp && (
            <p className="text-red-500 text-xs">{formErrors.curp}</p>
          )}
        </div>

        <div className="space-y-2">
          <label htmlFor="fechaNacimiento" className="text-sm font-medium">
            Fecha Nacimiento
          </label>
          <Input
            id="fechaNacimiento"
            name="fechaNacimiento"
            type="date"
            value={formData.fechaNacimiento}
            onChange={handleChange}
            required
            className={formErrors.fechaNacimiento ? 'border-red-500' : ''}
          />
          {formErrors.fechaNacimiento && (
            <p className="text-red-500 text-xs">{formErrors.fechaNacimiento}</p>
          )}
        </div>

        <div className="space-y-2">
          <label htmlFor="telefono" className="text-sm font-medium">
            Teléfono
          </label>
          <Input
            id="telefono"
            name="telefono"
            value={formData.telefono}
            onChange={handleChange}
            required
            pattern="[0-9]{10}"
            title="Teléfono a 10 dígitos"
            className={formErrors.telefono ? 'border-red-500' : ''}
          />
          {formErrors.telefono && (
            <p className="text-red-500 text-xs">{formErrors.telefono}</p>
          )}
        </div>

        <div className="space-y-2">
          <label htmlFor="domicilio" className="text-sm font-medium">
            Domicilio
          </label>
          <Input
            id="domicilio"
            name="domicilio"
            value={formData.domicilio}
            onChange={handleChange}
            required
            minLength={MIN_DOMICILIO_LENGTH}
            maxLength={MAX_DOMICILIO_LENGTH}
            className={formErrors.domicilio ? 'border-red-500' : ''}
          />
          {formErrors.domicilio && (
            <p className="text-red-500 text-xs">{formErrors.domicilio}</p>
          )}
          <p className="text-xs text-gray-500">
            {`El domicilio debe tener entre ${MIN_DOMICILIO_LENGTH} y ${MAX_DOMICILIO_LENGTH} caracteres`}
          </p>
        </div>

        <div className="space-y-2">
          <label htmlFor="fechaContratacion" className="text-sm font-medium">
            Fecha de Contratación
          </label>
          <Input
            id="fechaContratacion"
            name="fechaContratacion"
            type="date"
            value={formData.fechaContratacion}
            onChange={handleChange}
            required
            max={new Date().toISOString().split('T')[0]}
            className={formErrors.fechaContratacion ? 'border-red-500' : ''}
          />
          {formErrors.fechaContratacion && (
            <p className="text-red-500 text-xs">{formErrors.fechaContratacion}</p>
          )}
        </div>
      </div>

      {employee?.id && (
        <div className="border rounded-lg p-4 mt-6">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-4">
            <h3 className="text-lg font-semibold flex items-center gap-2">
              <Binary className="h-5 w-5 text-blue-500" />
              Documentos del Empleado
            </h3>
            <div className="flex items-center gap-4 text-sm text-gray-500 bg-gray-50 p-2 rounded-lg w-full sm:w-auto">
              <div className="flex items-center gap-2 flex-1 sm:flex-auto justify-center">
                <Circle className="h-4 w-4 text-gray-400" />
                <span>Pendiente</span>
              </div>
              <div className="flex items-center gap-2 flex-1 sm:flex-auto justify-center">
                <CheckCircle2 className="h-4 w-4 text-green-500" />
                <span>Completado</span>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
            {DOCUMENTOS_REQUERIDOS.map(doc => {
              const documento = documentosStatus.find(d => d.id === doc.id);
              const isSubido = documento?.subido;
              const IconComponent = doc.icon;

              return (
                <div
                  key={doc.id}
                  className={`
                    flex flex-col p-4 rounded-lg border
                    ${isSubido ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'}
                    transition-all duration-200 hover:shadow-md
                  `}
                >
                  <div className="flex items-start gap-3">
                    <div className={`
                      p-2 rounded-lg
                      ${isSubido ? 'bg-green-100 text-green-600' : 'bg-gray-200 text-gray-600'}
                      min-w-[2.5rem] flex items-center justify-center
                    `}>
                      <IconComponent className="h-5 w-5" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 flex-wrap">
                        <span className="font-medium truncate">{doc.label}</span>
                        {doc.obligatorio && (
                          <span className="text-red-500 text-xs px-2 py-0.5 bg-red-50 rounded-full">Requerido</span>
                        )}
                      </div>
                      <p className="text-sm text-gray-500 mt-1 line-clamp-2">{doc.description}</p>
                    </div>
                  </div>

                  <div className="flex flex-col items-start mt-4 pt-3 border-t border-dashed gap-2">
                    <div className="flex items-center gap-2">
                      {isSubido ? (
                        <Check className="h-5 w-5 text-green-500" />
                      ) : (
                        <X className="h-5 w-5 text-gray-400" />
                      )}
                      <span className="text-sm font-medium">
                        {isSubido ? 'Completado' : 'Pendiente'}
                      </span>
                    </div>
                    <div className="flex gap-2">
                      {isSubido ? (
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          className="text-blue-600 hover:text-blue-700 hover:bg-blue-50"
                          onClick={() => window.open(documento?.url, '_blank')}
                        >
                          <FileText className="h-4 w-4 mr-1" />
                          Ver
                        </Button>
                      ) : (
                        <>
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => handleDocumentoClick(doc.id)}
                            className="flex items-center gap-1"
                          >
                            <Upload className="h-4 w-4" />
                            Subir
                          </Button>
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => handleScanDocument(doc.id)}
                            className="flex items-center gap-1"
                          >
                            <Scan className="h-4 w-4" />
                            Escanear
                          </Button>
                        </>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>

          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            className="hidden"
            accept=".pdf,.jpg,.jpeg,.png"
          />
        </div>
      )}
    </form>
  );

  const modalFooter = (
    <>
      <Button type="button" variant="outline" onClick={onClose} disabled={isSaving}>
        Cancelar
      </Button>
      <Button type="submit" onClick={handleSubmit} disabled={isSaving || isUploading}>
        {isSaving ? 'Guardando...' : employee ? 'Guardar Cambios' : 'Crear Empleado'}
      </Button>
    </>
  );

  return (
    <BaseModal
      isOpen={isOpen}
      onClose={onClose}
      title={employee ? 'Editar Empleado' : 'Nuevo Empleado'}
      maxWidth="lg"
      footer={modalFooter}
      isLoading={isLoading}
    >
      {modalContent}
    </BaseModal>
  );
}import { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "../ui/dialog";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { Textarea } from "../ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import { FaCar } from 'react-icons/fa';
import { BsCalendarDate, BsCardText } from 'react-icons/bs';
import { MdAttachMoney, MdQrCode, MdCardMembership, MdSave, MdDelete, MdRefresh, MdClose, MdDocumentScanner } from 'react-icons/md';
import { IoColorPalette } from 'react-icons/io5';
import { GiCarWheel } from 'react-icons/gi';
import { RiFileList3Line, RiFileTextLine } from 'react-icons/ri';
import { Loader2 } from 'lucide-react';
import { useToast } from "../ui/use-toast";
import { Vehiculo, CreateVehiculoDto } from '../../services/vehiculo.service';

interface Document {
  id_documento?: number;
  url: string;
  tipo_documento: string;
  descripcion: string;
}

interface VehicleModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (vehicle: CreateVehiculoDto) => Promise<void>;
  vehicle?: Vehiculo;
}

export function InventoryModal({ 
  isOpen, 
  onClose, 
  onSave, 
  vehicle 
}: VehicleModalProps) {
  const { toast } = useToast();
  const [formData, setFormData] = useState({
    marca: '',
    modelo: '',
    anio: '',
    precio: '',
    num_serie: '',
    color: '',
    num_motor: '',
    num_factura: '',
    placas: '',
    tarjeta_circulacion: '',
  });

  const [scanning, setScanning] = useState(false);
  const [currentDocument, setCurrentDocument] = useState<Document | null>(null);
  const [documentComment, setDocumentComment] = useState('');
  const [documentType, setDocumentType] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    if (vehicle) {
      setFormData({
        marca: vehicle.marca,
        modelo: vehicle.modelo,
        anio: vehicle.anio.toString(),
        precio: vehicle.precio.toString(),
        num_serie: vehicle.num_serie,
        color: vehicle.color,
        num_motor: vehicle.num_motor,
        num_factura: vehicle.num_factura || '',
        placas: vehicle.placas || '',
        tarjeta_circulacion: vehicle.tarjeta_circulacion || '',
      });
    } else {
      setFormData({
        marca: '',
        modelo: '',
        anio: '',
        precio: '',
        num_serie: '',
        color: '',
        num_motor: '',
        num_factura: '',
        placas: '',
        tarjeta_circulacion: '',
      });
    }
    setErrors({});
  }, [vehicle, isOpen]);

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    const currentYear = new Date().getFullYear();

    if (!formData.marca.trim()) newErrors.marca = 'La marca es requerida';
    if (!formData.modelo.trim()) newErrors.modelo = 'El modelo es requerido';
    if (!formData.anio) {
      newErrors.anio = 'El año es requerido';
    } else {
      const year = Number(formData.anio);
      if (year < 1900 || year > currentYear + 1) {
        newErrors.anio = `El año debe estar entre 1900 y ${currentYear + 1}`;
      }
    }
    if (!formData.precio) {
      newErrors.precio = 'El precio es requerido';
    } else if (Number(formData.precio) <= 0) {
      newErrors.precio = 'El precio debe ser mayor a 0';
    }
    if (!formData.num_serie.trim()) {
      newErrors.num_serie = 'El número de serie es requerido';
    } else if (formData.num_serie.length !== 17) {
      newErrors.num_serie = 'El número de serie debe tener 17 caracteres';
    }
    if (!formData.color.trim()) newErrors.color = 'El color es requerido';
    if (!formData.num_motor.trim()) newErrors.num_motor = 'El número de motor es requerido';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast({
        title: "Error",
        description: "Por favor, corrija los errores en el formulario",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsSubmitting(true);
      const vehicleData: CreateVehiculoDto = {
        marca: formData.marca,
        modelo: formData.modelo,
        anio: Number(formData.anio),
        precio: Number(formData.precio),
        num_serie: formData.num_serie,
        color: formData.color,
        num_motor: formData.num_motor,
        num_factura: formData.num_factura || undefined,
        placas: formData.placas || undefined,
        tarjeta_circulacion: formData.tarjeta_circulacion || undefined
      };

      await onSave(vehicleData);
      onClose();
    } catch (error) {
      console.error('Error al guardar vehículo:', error);
      toast({
        title: "Error",
        description: "No se pudo guardar el vehículo. Por favor, intente de nuevo.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const handleScan = async () => {
    setScanning(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      setCurrentDocument({
        url: 'https://example.com/scanned-doc.pdf',
        tipo_documento: documentType,
        descripcion: documentComment
      });
      toast({
        title: "Éxito",
        description: "Documento escaneado correctamente",
      });
    } catch (error) {
      console.error('Error scanning document:', error);
      toast({
        title: "Error",
        description: "Error al escanear el documento. Por favor, intente de nuevo.",
        variant: "destructive"
      });
    } finally {
      setScanning(false);
    }
  };

  const handleRescan = () => {
    setCurrentDocument(null);
    handleScan();
  };

  const handleDeleteScan = () => {
    setCurrentDocument(null);
    setDocumentComment('');
    setDocumentType('');
  };

  const handleSaveDocument = async () => {
    if (!currentDocument) return;
    
    try {
      console.log('Saving document:', {
        ...currentDocument,
        descripcion: documentComment
      });
      
      toast({
        title: "Éxito",
        description: "Documento guardado correctamente",
      });
      handleDeleteScan();
    } catch (error) {
      console.error('Error saving document:', error);
      toast({
        title: "Error",
        description: "Error al guardar el documento. Por favor, intente de nuevo.",
        variant: "destructive"
      });
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-[95vw] w-full sm:max-w-[600px] max-h-[90vh] overflow-hidden flex flex-col">
        <DialogHeader className="px-6 py-4 border-b">
          <DialogTitle className="flex items-center gap-2">
            <FaCar className="h-5 w-5" />
            {vehicle ? 'Editar Vehículo' : 'Nuevo Vehículo'}
          </DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="flex-1 flex flex-col overflow-hidden">
          <div className="flex-1 overflow-y-auto px-6 py-4 [&::-webkit-scrollbar]:w-2 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-track]:rounded-full [&::-webkit-scrollbar-thumb]:bg-slate-300/40 hover:[&::-webkit-scrollbar-thumb]:bg-slate-300/60 [&::-webkit-scrollbar-track]:bg-slate-100/50 transition-colors">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <label htmlFor="marca" className="text-sm font-medium flex items-center gap-2">
                  <FaCar className="h-4 w-4" />
                  Marca
                </label>
                <Input
                  id="marca"
                  name="marca"
                  value={formData.marca}
                  onChange={handleChange}
                  required
                  className={errors.marca ? 'border-red-500' : ''}
                />
                {errors.marca && (
                  <p className="text-sm text-red-500">{errors.marca}</p>
                )}
              </div>
              <div className="space-y-2">
                <label htmlFor="modelo" className="text-sm font-medium flex items-center gap-2">
                  <FaCar className="h-4 w-4" />
                  Modelo
                </label>
                <Input
                  id="modelo"
                  name="modelo"
                  value={formData.modelo}
                  onChange={handleChange}
                  required
                  className={errors.modelo ? 'border-red-500' : ''}
                />
                {errors.modelo && (
                  <p className="text-sm text-red-500">{errors.modelo}</p>
                )}
              </div>
              <div className="space-y-2">
                <label htmlFor="anio" className="text-sm font-medium flex items-center gap-2">
                  <BsCalendarDate className="h-4 w-4" />
                  Año
                </label>
                <Input
                  id="anio"
                  name="anio"
                  type="number"
                  min="1900"
                  max={new Date().getFullYear() + 1}
                  value={formData.anio}
                  onChange={handleChange}
                  required
                  className={errors.anio ? 'border-red-500' : ''}
                />
                {errors.anio && (
                  <p className="text-sm text-red-500">{errors.anio}</p>
                )}
              </div>
              <div className="space-y-2">
                <label htmlFor="precio" className="text-sm font-medium flex items-center gap-2">
                  <MdAttachMoney className="h-4 w-4" />
                  Precio
                </label>
                <Input
                  id="precio"
                  name="precio"
                  type="number"
                  min="0"
                  value={formData.precio}
                  onChange={handleChange}
                  required
                  className={errors.precio ? 'border-red-500' : ''}
                />
                {errors.precio && (
                  <p className="text-sm text-red-500">{errors.precio}</p>
                )}
              </div>
              <div className="space-y-2">
                <label htmlFor="num_serie" className="text-sm font-medium flex items-center gap-2">
                  <MdQrCode className="h-4 w-4" />
                  Número de Serie
                </label>
                <Input
                  id="num_serie"
                  name="num_serie"
                  value={formData.num_serie}
                  onChange={handleChange}
                  required
                  className={errors.num_serie ? 'border-red-500' : ''}
                />
                {errors.num_serie && (
                  <p className="text-sm text-red-500">{errors.num_serie}</p>
                )}
              </div>
              <div className="space-y-2">
                <label htmlFor="color" className="text-sm font-medium flex items-center gap-2">
                  <IoColorPalette className="h-4 w-4" />
                  Color
                </label>
                <Input
                  id="color"
                  name="color"
                  value={formData.color}
                  onChange={handleChange}
                  required
                  className={errors.color ? 'border-red-500' : ''}
                />
                {errors.color && (
                  <p className="text-sm text-red-500">{errors.color}</p>
                )}
              </div>
              <div className="space-y-2">
                <label htmlFor="num_motor" className="text-sm font-medium flex items-center gap-2">
                  <GiCarWheel className="h-4 w-4" />
                  Número de Motor
                </label>
                <Input
                  id="num_motor"
                  name="num_motor"
                  value={formData.num_motor}
                  onChange={handleChange}
                  required
                  className={errors.num_motor ? 'border-red-500' : ''}
                />
                {errors.num_motor && (
                  <p className="text-sm text-red-500">{errors.num_motor}</p>
                )}
              </div>
              <div className="space-y-2">
                <label htmlFor="num_factura" className="text-sm font-medium flex items-center gap-2">
                  <RiFileList3Line className="h-4 w-4" />
                  Número de Factura
                </label>
                <Input
                  id="num_factura"
                  name="num_factura"
                  value={formData.num_factura}
                  onChange={handleChange}
                />
              </div>
              <div className="space-y-2">
                <label htmlFor="placas" className="text-sm font-medium flex items-center gap-2">
                  <BsCardText className="h-4 w-4" />
                  Placas
                </label>
                <Input
                  id="placas"
                  name="placas"
                  value={formData.placas}
                  onChange={handleChange}
                />
              </div>
              <div className="space-y-2">
                <label htmlFor="tarjeta_circulacion" className="text-sm font-medium flex items-center gap-2">
                  <MdCardMembership className="h-4 w-4" />
                  Tarjeta de Circulación
                </label>
                <Input
                  id="tarjeta_circulacion"
                  name="tarjeta_circulacion"
                  value={formData.tarjeta_circulacion}
                  onChange={handleChange}
                />
              </div>
            </div>

            <div className="mt-6 border-t pt-6">
              <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
                <RiFileTextLine className="h-5 w-5" />
                Documentos del Vehículo
              </h3>
              
              {!currentDocument ? (
                <div className="space-y-4">
                  <div className="space-y-2">
                    <label htmlFor="documentType" className="text-sm font-medium flex items-center gap-2">
                      <RiFileTextLine className="h-4 w-4" />
                      Tipo de Documento
                    </label>
                    <Select value={documentType} onValueChange={setDocumentType}>
                      <SelectTrigger>
                        <SelectValue placeholder="Seleccionar tipo de documento" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="factura">Factura</SelectItem>
                        <SelectItem value="tarjeta_circulacion">Tarjeta de Circulación</SelectItem>
                        <SelectItem value="identificacion">Identificación</SelectItem>
                        <SelectItem value="otro">Otro</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <Button 
                    type="button"
                    onClick={handleScan}
                    disabled={scanning || !documentType}
                    className="w-full flex items-center justify-center gap-2"
                  >
                    {scanning ? (
                      <>
                        <Loader2 className="h-4 w-4 animate-spin" />
                        Escaneando...
                      </>
                    ) : (
                      <>
                        <MdDocumentScanner className="h-4 w-4" />
                        Escanear Documento
                      </>
                    )}
                  </Button>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="p-4 border rounded-lg">
                    <p className="text-sm mb-2">Documento escaneado exitosamente</p>
                    <div className="space-y-2">
                      <label htmlFor="documentComment" className="text-sm font-medium flex items-center gap-2">
                        <RiFileTextLine className="h-4 w-4" />
                        Comentarios
                      </label>
                      <Textarea
                        id="documentComment"
                        value={documentComment}
                        onChange={(e) => setDocumentComment(e.target.value)}
                        placeholder="Agregar comentarios sobre el documento..."
                        className="min-h-[100px]"
                      />
                    </div>
                  </div>
                  
                  <div className="flex gap-2">
                    <Button type="button" variant="outline" onClick={handleRescan} className="flex items-center gap-2">
                      <MdRefresh className="h-4 w-4" />
                      Reescanear
                    </Button>
                    <Button type="button" variant="destructive" onClick={handleDeleteScan} className="flex items-center gap-2">
                      <MdDelete className="h-4 w-4" />
                      Eliminar
                    </Button>
                    <Button 
                      type="button"
                      onClick={handleSaveDocument}
                      disabled={!documentComment}
                      className="ml-auto flex items-center gap-2"
                    >
                      <MdSave className="h-4 w-4" />
                      Guardar Documento
                    </Button>
                  </div>
                </div>
              )}
            </div>
          </div>

          <DialogFooter className="px-6 py-4 border-t mt-auto">
            <Button 
              type="button" 
              variant="outline" 
              onClick={onClose} 
              className="flex items-center gap-2"
              disabled={isSubmitting}
            >
              <MdClose className="h-4 w-4" />
              Cancelar
            </Button>
            <Button 
              type="submit" 
              className="flex items-center gap-2"
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <MdSave className="h-4 w-4" />
              )}
              {vehicle ? 'Guardar Cambios' : 'Agregar Vehículo'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}import React, { useState } from 'react';
import { Dialog } from '../ui/dialog';
import { Button } from '../ui/button';
import { Select } from '../ui/select';
import { toast } from '../ui/use-toast';
import { ScannerInterface } from '../ScannerInterface';
import { TipoDocumento, VALIDACION_DOCUMENTOS } from '../../types/documento.types';

interface ScannerModalProps {
  isOpen: boolean;
  onClose: () => void;
  clienteId?: number;
  documentId?: number;
  onDocumentScanned?: (documentId: number) => void;
  initialTipoDocumento?: TipoDocumento;
}

export const ScannerModal: React.FC<ScannerModalProps> = ({
  isOpen,
  onClose,
  clienteId,
  documentId,
  onDocumentScanned,
  initialTipoDocumento
}) => {
  const [tipoDocumento, setTipoDocumento] = useState<TipoDocumento>(
    initialTipoDocumento || 'Otro'
  );

  const handleDocumentScanned = (newDocumentId: number) => {
    toast({
      title: 'Documento escaneado',
      description: 'El documento se ha escaneado y guardado correctamente.',
      variant: 'default'
    });

    if (onDocumentScanned) {
      onDocumentScanned(newDocumentId);
    }
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <div className="fixed inset-0 z-50 flex items-center justify-center">
        <div className="bg-white rounded-lg shadow-lg p-6 w-[800px] max-h-[90vh] overflow-y-auto">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Escanear Documento</h2>
            <Button variant="ghost" onClick={onClose}>×</Button>
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">
              Tipo de Documento
            </label>
            <Select
              value={tipoDocumento}
              onValueChange={(value: TipoDocumento) => setTipoDocumento(value)}
            >
              {Object.keys(VALIDACION_DOCUMENTOS).map((tipo) => (
                <option key={tipo} value={tipo}>
                  {tipo}
                </option>
              ))}
            </Select>
            {tipoDocumento !== 'Otro' && (
              <div className="mt-2 text-sm text-gray-500">
                <p>Requisitos del documento:</p>
                <ul className="list-disc list-inside">
                  <li>
                    Formatos permitidos:{' '}
                    {VALIDACION_DOCUMENTOS[tipoDocumento].extensionesPermitidas.join(', ')}
                  </li>
                  <li>
                    Tamaño máximo: {VALIDACION_DOCUMENTOS[tipoDocumento].tamañoMaximoMB}MB
                  </li>
                  {VALIDACION_DOCUMENTOS[tipoDocumento].vigenciaRequerida && (
                    <li>
                      Vigencia máxima:{' '}
                      {VALIDACION_DOCUMENTOS[tipoDocumento].antiguedadMaximaMeses} meses
                    </li>
                  )}
                  {VALIDACION_DOCUMENTOS[tipoDocumento].requiereVerificacion && (
                    <li>Requiere verificación</li>
                  )}
                  {VALIDACION_DOCUMENTOS[tipoDocumento].requiereFirma && (
                    <li>Requiere firma</li>
                  )}
                </ul>
              </div>
            )}
          </div>

          <ScannerInterface
            clienteId={clienteId}
            documentId={documentId}
            tipoDocumento={tipoDocumento}
            onDocumentScanned={handleDocumentScanned}
          />

          <div className="mt-4 flex justify-end">
            <Button variant="outline" onClick={onClose}>
              Cancelar
            </Button>
          </div>
        </div>
      </div>
    </Dialog>
  );
};

export default ScannerModal;import React, { useState, useEffect, ChangeEvent } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "../../components/ui/dialog";
import { Button } from "../../components/ui/button";
import { Input } from "../../components/ui/input";
import { FaCalendar, FaUser, FaCar, FaMoneyBillWave, FaFileContract, FaUserTie } from 'react-icons/fa';
import { toast } from "../../components/ui/use-toast";
import clienteService, { Cliente } from '../../services/cliente.service';
import vehiculoService, { Vehiculo } from '../../services/vehiculo.service';
import { authService } from '../../services/auth.service';
import transaccionService, { CreateTransaccionDto, UpdateTransaccionDto, Transaccion } from '../../services/transaccion.service';
import tipoTransaccionService from '../../services/tipo-transaccion.service';
import documentoService from '../../services/documento.service';
import { TipoTransaccion } from '../../types';
import { DocumentChecklist } from '../DocumentChecklist';

interface TransaccionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (transaccion: Transaccion) => void;
  transaccion?: Transaccion;
}

interface FormState {
  fechaTransaccion: string;
  createData: CreateTransaccionDto;
}

export const TransactionsModal: React.FC<TransaccionModalProps> = ({ 
  isOpen, 
  onClose, 
  onSave, 
  transaccion 
}) => {
  const [step, setStep] = useState<'form' | 'preview' | 'confirm'>('form');
  const [formState, setFormState] = useState<FormState>({
    fechaTransaccion: transaccion?.fecha?.toString().split('T')[0] || new Date().toISOString().split('T')[0],
    createData: {
      idUsuario: transaccion?.idUsuario || authService.getCurrentUser()?.id || 0,
      idCliente: transaccion?.idCliente || 0,
      idVehiculo: transaccion?.idVehiculo || 0,
      idCredito: transaccion?.idCredito,
      idTipoTransaccion: transaccion?.idTipoTransaccion || 0
    }
  });
  const [documents, setDocuments] = useState<Array<{ file: File; description: string }>>([]);
  const [confirmationInput, setConfirmationInput] = useState('');
  const [clientes, setClientes] = useState<Cliente[]>([]);
  const [vehiculos, setVehiculos] = useState<Vehiculo[]>([]);
  const [tiposTransaccion, setTiposTransaccion] = useState<TipoTransaccion[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadData = async () => {
      try {
        const [clientesData, vehiculosData, tiposTransaccionData] = await Promise.all([
          clienteService.getAll(),
          vehiculoService.getAll(),
          tipoTransaccionService.getAll()
        ]);
        setClientes(clientesData);
        setVehiculos(vehiculosData);
        setTiposTransaccion(tiposTransaccionData);
      } catch (error) {
        console.error('Error al cargar datos:', error);
        toast({
          title: "Error",
          description: "No se pudieron cargar los datos necesarios",
          variant: "destructive"
        });
      } finally {
        setLoading(false);
      }
    };

    if (isOpen) {
      loadData();
    }
  }, [isOpen]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (documents.length === 0) {
      toast({
        title: "Error",
        description: "Debe subir al menos un documento",
        variant: "destructive"
      });
      return;
    }
    setStep('preview');
  };

  const handleConfirm = async () => {
    const currentUser = authService.getCurrentUser();
    if (confirmationInput === currentUser?.id.toString()) {
      try {
        let savedTransaccion: Transaccion;
        if (transaccion?.id) {
          savedTransaccion = await transaccionService.update(transaccion.id, formState.createData);
        } else {
          savedTransaccion = await transaccionService.create(formState.createData);
        }

        // Subir documentos
        const uploadPromises = documents.map(doc =>
          documentoService.crearDocumento({
            nombre: doc.file.name,
            tipo: doc.file.type,
            archivo: doc.file,
            id_transaccion: savedTransaccion.id,
            fecha_transaccion: new Date(formState.fechaTransaccion)
          })
        );

        await Promise.all(uploadPromises);

        onSave(savedTransaccion);
        toast({
          title: "Éxito",
          description: `Transacción ${transaccion?.id ? 'actualizada' : 'creada'} correctamente`,
        });
        onClose();
      } catch (error) {
        console.error('Error al guardar transacción:', error);
        toast({
          title: "Error",
          description: "No se pudo guardar la transacción",
          variant: "destructive"
        });
      }
    }
  };

  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    if (name === 'fechaTransaccion') {
      setFormState(prev => ({ ...prev, fechaTransaccion: value }));
    } else {
      setFormState(prev => ({
        ...prev,
        createData: { ...prev.createData, [name]: value }
      }));
    }
  };

  const handleDocumentsChange = (newDocuments: Array<{ file: File; description: string }>) => {
    setDocuments(newDocuments);
  };

  const getTipoTransaccionNombre = (id: number): 'VENTA' | 'CREDITO' | 'CONSIGNACION' | undefined => {
    const tipo = tiposTransaccion.find(t => t.id === id);
    if (!tipo) return undefined;
    
    if (tipo.nombre.toUpperCase().includes('VENTA')) return 'VENTA';
    if (tipo.nombre.toUpperCase().includes('CREDITO')) return 'CREDITO';
    if (tipo.nombre.toUpperCase().includes('CONSIGNACION')) return 'CONSIGNACION';
    return undefined;
  };

  const selectedCliente = clientes.find(c => c.id === Number(formState.createData.idCliente));
  const selectedVehiculo = vehiculos.find(v => v.id_vehiculo === Number(formState.createData.idVehiculo));
  const selectedTipoTransaccion = tiposTransaccion.find(t => t.id === Number(formState.createData.idTipoTransaccion));

  if (!isOpen) return null;
  if (loading) return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px]">
        <div className="flex justify-center items-center h-40">
          Cargando...
        </div>
      </DialogContent>
    </Dialog>
  );

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px]">
        {step === 'form' && (
          <form onSubmit={handleSubmit}>
            <DialogHeader>
              <DialogTitle>
                {transaccion ? 'Editar Transacción' : 'Nueva Transacción'}
              </DialogTitle>
            </DialogHeader>
            <div className="py-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Usuario actual (bloqueado) */}
                <div className="space-y-2">
                  <label className="text-sm font-medium flex items-center gap-2">
                    <FaUserTie className="text-gray-500" />
                    Usuario Actual
                  </label>
                  <Input
                    value={authService.getCurrentUser()?.nombre || ''}
                    disabled
                    className="bg-gray-100"
                  />
                </div>

                {/* Fecha */}
                <div className="space-y-2">
                  <label htmlFor="fechaTransaccion" className="text-sm font-medium flex items-center gap-2">
                    <FaCalendar className="text-gray-500" />
                    Fecha
                  </label>
                  <Input
                    id="fechaTransaccion"
                    name="fechaTransaccion"
                    type="date"
                    value={formState.fechaTransaccion}
                    onChange={handleChange}
                    required
                  />
                </div>

                {/* Cliente */}
                <div className="space-y-2">
                  <label htmlFor="idCliente" className="text-sm font-medium flex items-center gap-2">
                    <FaUser className="text-gray-500" />
                    Cliente
                  </label>
                  <select
                    id="idCliente"
                    name="idCliente"
                    value={formState.createData.idCliente}
                    onChange={handleChange}
                    required
                    className="w-full border rounded-md p-2"
                  >
                    <option value="">Seleccione un cliente</option>
                    {clientes.map(cliente => (
                      <option key={cliente.id} value={cliente.id}>
                        {cliente.nombre} - {cliente.curp}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Vehículo */}
                <div className="space-y-2">
                  <label htmlFor="idVehiculo" className="text-sm font-medium flex items-center gap-2">
                    <FaCar className="text-gray-500" />
                    Vehículo
                  </label>
                  <select
                    id="idVehiculo"
                    name="idVehiculo"
                    value={formState.createData.idVehiculo}
                    onChange={handleChange}
                    required
                    className="w-full border rounded-md p-2"
                  >
                    <option value="">Seleccione un vehículo</option>
                    {vehiculos.map(vehiculo => (
                      <option key={vehiculo.id_vehiculo} value={vehiculo.id_vehiculo}>
                        {vehiculo.marca} {vehiculo.modelo} {vehiculo.anio} - {vehiculo.color}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Tipo de Transacción */}
                <div className="space-y-2">
                  <label htmlFor="idTipoTransaccion" className="text-sm font-medium flex items-center gap-2">
                    <FaFileContract className="text-gray-500" />
                    Tipo de Transacción
                  </label>
                  <select
                    id="idTipoTransaccion"
                    name="idTipoTransaccion"
                    value={formState.createData.idTipoTransaccion}
                    onChange={handleChange}
                    required
                    className="w-full border rounded-md p-2"
                  >
                    <option value="">Seleccione tipo</option>
                    {tiposTransaccion.map(tipo => (
                      <option key={tipo.id} value={tipo.id}>
                        {tipo.nombre}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Crédito (opcional) */}
                <div className="space-y-2">
                  <label htmlFor="idCredito" className="text-sm font-medium flex items-center gap-2">
                    <FaMoneyBillWave className="text-gray-500" />
                    Crédito (Opcional)
                  </label>
                  <Input
                    id="idCredito"
                    name="idCredito"
                    type="number"
                    value={formState.createData.idCredito || ''}
                    onChange={handleChange}
                    placeholder="ID del crédito si aplica"
                  />
                </div>

                {/* Documentos */}
                <div className="md:col-span-2">
                  {selectedCliente && formState.createData.idTipoTransaccion && (
                    <DocumentChecklist
                      tipoPersona={selectedCliente.tipoPersona}
                      onDocumentsChange={handleDocumentsChange}
                      tipoTransaccion={getTipoTransaccionNombre(Number(formState.createData.idTipoTransaccion))}
                    />
                  )}
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={onClose}>
                Cancelar
              </Button>
              <Button type="submit">
                Previsualizar
              </Button>
            </DialogFooter>
          </form>
        )}

        {step === 'preview' && (
          <>
            <DialogHeader>
              <DialogTitle>Previsualización de Transacción</DialogTitle>
            </DialogHeader>
            <div className="py-4 space-y-4">
              <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                <p><strong>Fecha:</strong> {formState.fechaTransaccion}</p>
                <p><strong>Usuario:</strong> {authService.getCurrentUser()?.nombre}</p>
                <p><strong>Cliente:</strong> {selectedCliente?.nombre}</p>
                <p><strong>Vehículo:</strong> {selectedVehiculo?.marca} {selectedVehiculo?.modelo} {selectedVehiculo?.anio}</p>
                <p><strong>Tipo de Transacción:</strong> {selectedTipoTransaccion?.nombre}</p>
                {formState.createData.idCredito && <p><strong>ID Crédito:</strong> {formState.createData.idCredito}</p>}
                <div className="mt-4">
                  <p><strong>Documentos a subir:</strong></p>
                  <ul className="list-disc list-inside">
                    {documents.map((doc, index) => (
                      <li key={index}>
                        {doc.file.name} - {doc.description}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
              <Button 
                onClick={() => setStep('confirm')}
                className="w-full"
              >
                Confirmar y Proceder
              </Button>
            </div>
          </>
        )}

        {step === 'confirm' && (
          <>
            <DialogHeader>
              <DialogTitle>Confirmar Transacción</DialogTitle>
            </DialogHeader>
            <div className="py-4 space-y-4">
              <p className="text-sm text-gray-600">
                Para confirmar la transacción, ingrese su número de empleado:
              </p>
              <Input
                value={confirmationInput}
                onChange={(e: ChangeEvent<HTMLInputElement>) => setConfirmationInput(e.target.value)}
                placeholder="Número de empleado"
              />
              <Button 
                onClick={handleConfirm}
                className="w-full"
                disabled={confirmationInput !== authService.getCurrentUser()?.id.toString()}
              >
                Confirmar y Guardar
              </Button>
            </div>
          </>
        )}
      </DialogContent>
    </Dialog>
  );
};import { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "../../components/ui/dialog";
import { Button } from "../../components/ui/button";
import { Download, Eye, Loader2 } from 'lucide-react';
import documentoService, { Documento } from '../../services/documento.service';
import { toast } from '../../components/ui/use-toast';

interface ViewDocumentsModalProps {
  isOpen: boolean;
  onClose: () => void;
  transactionId: number;
}

export function ViewDocumentsModal({ isOpen, onClose, transactionId }: ViewDocumentsModalProps) {
  const [documentos, setDocumentos] = useState<Documento[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (isOpen) {
      loadDocumentos();
    }
  }, [isOpen, transactionId]);

  const loadDocumentos = async () => {
    try {
      const response = await documentoService.obtenerDocumentosPorTransaccion(transactionId);
      setDocumentos(response.documentos);
    } catch (error) {
      console.error('Error al cargar documentos:', error);
      toast({
        title: "Error",
        description: "No se pudieron cargar los documentos",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownload = async (documento: Documento) => {
    try {
      // Asumimos que el documento.url es una URL válida para descargar
      const response = await fetch(documento.url);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = documento.nombre;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error al descargar documento:', error);
      toast({
        title: "Error",
        description: "No se pudo descargar el documento",
        variant: "destructive"
      });
    }
  };

  const handleView = (documento: Documento) => {
    // Abre el documento en una nueva pestaña
    window.open(documento.url, '_blank');
  };

  if (isLoading) {
    return (
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="sm:max-w-[425px]">
          <div className="flex flex-col items-center justify-center h-40">
            <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
            <p className="mt-2 text-sm text-gray-500">Cargando documentos...</p>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Documentos de la Transacción</DialogTitle>
        </DialogHeader>

        <div className="space-y-4 py-4">
          {documentos.length === 0 ? (
            <p className="text-center text-gray-500">No hay documentos disponibles</p>
          ) : (
            <div className="space-y-4">
              {documentos.map((documento) => (
                <div key={documento.id} className="border rounded-lg p-4 space-y-2">
                  <p className="font-medium">{documento.nombre}</p>
                  <p className="text-sm text-gray-500">
                    {new Date(documento.fecha_creacion).toLocaleDateString()}
                  </p>
                  <div className="flex space-x-2">
                    <Button
                      className="flex-1"
                      onClick={() => handleDownload(documento)}
                    >
                      <Download className="mr-2 h-4 w-4" />
                      Descargar
                    </Button>
                    <Button
                      className="flex-1"
                      variant="outline"
                      onClick={() => handleView(documento)}
                    >
                      <Eye className="mr-2 h-4 w-4" />
                      Ver
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}import { useState, useEffect } from 'react';
import { BaseModal } from "../ui/base-modal";
import { Button } from "../ui/button";
import { FaDownload, FaEye, FaFileAlt } from 'react-icons/fa';
import { documentoService, Documento } from '../../services/documento.service';
import { IEmpleado } from '../../services/empleado.service';
import { toast } from '../ui/use-toast';
import { Loader2 } from 'lucide-react';

interface ViewEmployeeDocumentsModalProps {
  isOpen: boolean;
  onClose: () => void;
  employee: IEmpleado;
}

export function ViewEmployeeDocumentsModal({ isOpen, onClose, employee }: ViewEmployeeDocumentsModalProps) {
  const [documentos, setDocumentos] = useState<Documento[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (isOpen && employee.id_empleado) {
      loadDocumentos();
    }
  }, [isOpen, employee.id_empleado]);

  const loadDocumentos = async () => {
    try {
      setIsLoading(true);
      const response = await documentoService.obtenerDocumentosPorEmpleado(employee.id_empleado!);
      setDocumentos(response.documentos);
    } catch (error) {
      console.error('Error al cargar documentos:', error);
      toast({
        title: "Error",
        description: "No se pudieron cargar los documentos",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownload = async (documento: Documento) => {
    try {
      const response = await fetch(documento.url);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = documento.nombre;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error al descargar documento:', error);
      toast({
        title: "Error",
        description: "No se pudo descargar el documento",
        variant: "destructive"
      });
    }
  };

  const handleView = (documento: Documento) => {
    window.open(documento.url, '_blank');
  };

  const getDocumentTypeLabel = (tipo: string) => {
    const tipos = {
      'cv': 'Curriculum Vitae',
      'ine': 'Identificación INE',
      'curp': 'CURP',
      'comprobante_domicilio': 'Comprobante de Domicilio',
      'rfc': 'RFC',
      'acta_nacimiento': 'Acta de Nacimiento',
      'comprobante_estudios': 'Comprobante de Estudios'
    };
    return tipos[tipo as keyof typeof tipos] || tipo;
  };

  const modalContent = (
    <div className="space-y-6">
      <div className="bg-gray-50 p-4 rounded-lg">
        <div className="flex items-center gap-3 mb-4">
          <FaFileAlt className="text-gray-500 text-xl" />
          <div>
            <h3 className="font-semibold">Documentos de {employee.nombre}</h3>
            {employee.id_empleado && (
              <p className="text-sm text-gray-500">ID: {employee.id_empleado}</p>
            )}
          </div>
        </div>
      </div>

      {isLoading ? (
        <div className="flex justify-center items-center h-40">
          <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
          <span className="ml-2">Cargando documentos...</span>
        </div>
      ) : documentos.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          No hay documentos disponibles
        </div>
      ) : (
        <div className="space-y-4">
          {documentos.map((doc) => (
            <div
              key={doc.id}
              className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors"
            >
              <div className="flex items-center gap-3">
                <FaFileAlt className="text-gray-400" />
                <div>
                  <p className="font-medium">{getDocumentTypeLabel(doc.tipo)}</p>
                  <p className="text-sm text-gray-500">
                    Actualizado: {new Date(doc.fecha_subida).toLocaleDateString()}
                  </p>
                </div>
              </div>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  className="flex items-center gap-2"
                  onClick={() => handleView(doc)}
                >
                  <FaEye className="h-4 w-4" />
                  Ver
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  className="flex items-center gap-2"
                  onClick={() => handleDownload(doc)}
                >
                  <FaDownload className="h-4 w-4" />
                  Descargar
                </Button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );

  const modalFooter = (
    <Button variant="outline" onClick={onClose}>
      Cerrar
    </Button>
  );

  return (
    <BaseModal
      isOpen={isOpen}
      onClose={onClose}
      title="Documentos del Empleado"
      maxWidth="lg"
      footer={modalFooter}
    >
      {modalContent}
    </BaseModal>
  );
}