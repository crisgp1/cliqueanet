import axios from 'axios';
import { LoginResponse, LoginCredentials, LoginHistory } from '../types';
import { ipService } from './ip.service';

const API_URL = 'http://localhost:3001';

class AuthService {
  async login(credentials: LoginCredentials): Promise<LoginResponse> {
    try {
      console.log('ðŸš€ Obteniendo IP del cliente...');
      const ip_address = await ipService.getClientIp();
      console.log('âœ… IP obtenida:', ip_address);

      const enrichedCredentials = {
        ...credentials,
        user_agent: window.navigator.userAgent,
        ip_address
      };

      console.log('ðŸš€ Enviando credenciales:', {
        ...enrichedCredentials,
        password: '[REDACTED]'
      });

      const response = await axios.post<LoginResponse>(
        `${API_URL}/api/usuarios/login`, 
        enrichedCredentials
      );

      if (response.data.success && response.data.data) {
        // Store user data and token in localStorage
        localStorage.setItem('user', JSON.stringify(response.data.data.usuario));
        localStorage.setItem('token', response.data.data.token);
        
        if (response.data.data.lastLogin) {
          localStorage.setItem('lastLogin', JSON.stringify(response.data.data.lastLogin));
        }
        
        axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.data.token}`;
      }

      return response.data;
    } catch (error: unknown) {
      if (axios.isAxiosError(error)) {
        // Si es un error de respuesta del servidor
        if (error.response?.data) {
          return error.response.data as LoginResponse;
        }
        
        // Si es un error de red o tiempo de espera
        return {
          success: false,
          message: error.message || 'Error de conexiÃ³n con el servidor'
        };
      }

      // Para otros tipos de errores
      return {
        success: false,
        message: 'Error inesperado durante el inicio de sesiÃ³n'
      };
    }
  }

  logout(): void {
    localStorage.removeItem('user');
    localStorage.removeItem('token');
    localStorage.removeItem('lastLogin');
    delete axios.defaults.headers.common['Authorization'];
    ipService.clearCache();
  }

  getCurrentUser() {
    const userStr = localStorage.getItem('user');
    if (userStr) {
      return JSON.parse(userStr);
    }
    return null;
  }

  getLastLogin(): LoginHistory | null {
    const lastLoginStr = localStorage.getItem('lastLogin');
    if (lastLoginStr) {
      return JSON.parse(lastLoginStr);
    }
    return null;
  }

  getToken(): string | null {
    return localStorage.getItem('token');
  }

  isAuthenticated(): boolean {
    return !!this.getToken();
  }

  setupAxiosInterceptors(): void {
    const token = this.getToken();
    if (token) {
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    }

    axios.interceptors.response.use(
      response => response,
      error => {
        // Solo redirigir si no estamos ya en la pÃ¡gina de login
        if (error.response?.status === 401 && window.location.pathname !== '/login') {
          this.logout();
          // Usar history.push en lugar de window.location para evitar recargas
          window.location.href = '/login';
        }
        return Promise.reject(error);
      }
    );
  }
}

export const authService = new AuthService();
authService.setupAxiosInterceptors();import axios from 'axios';

const API_URL =  'http://localhost:3001';

export class CitaService {
    private static instance: CitaService;
    private baseUrl: string;

    private constructor() {
        this.baseUrl = `${API_URL}/api/citas`;
    }

    public static getInstance(): CitaService {
        if (!CitaService.instance) {
            CitaService.instance = new CitaService();
        }
        return CitaService.instance;
    }

    public async obtenerCitas() {
        try {
            const response = await axios.get(this.baseUrl, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async obtenerCitaPorId(id: number) {
        try {
            const response = await axios.get(`${this.baseUrl}/${id}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async obtenerCitasPorCliente(clienteId: number) {
        try {
            const response = await axios.get(`${this.baseUrl}/cliente/${clienteId}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async crearCita(cita: {
        clienteId: number;
        fecha: Date;
        hora: string;
        motivo: string;
        estado: string;
        empleadosIds?: number[];
        notas?: string;
    }) {
        try {
            const response = await axios.post(this.baseUrl, cita, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json'
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async actualizarCita(id: number, cita: {
        fecha?: Date;
        hora?: string;
        motivo?: string;
        estado?: string;
        empleadosIds?: number[];
        notas?: string;
    }) {
        try {
            const response = await axios.put(`${this.baseUrl}/${id}`, cita, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json'
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async eliminarCita(id: number) {
        try {
            const response = await axios.delete(`${this.baseUrl}/${id}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    private handleError(error: any): Error {
        if (error.response) {
            const message = error.response.data.message || 'Error en la solicitud de la cita';
            return new Error(message);
        } else if (error.request) {
            return new Error('No se recibiÃ³ respuesta del servidor');
        } else {
            return new Error('Error al procesar la solicitud de la cita');
        }
    }
}

export const citaService = CitaService.getInstance();import axios from 'axios';

const API_URL = 'http://localhost:3001/api';

export interface Cliente {
  id: number;
  nombre: string;
  curp: string;
  idTipoIdentificacion: number;
  numIdentificacion: string;
  fechaNacimiento: Date;
  telefono: string;
  correo: string;
  domicilio: string;
  tipoPersona: 'FÃ­sica' | 'Moral';
  razonSocial?: string;
  representanteLegal?: string;
  rfc?: string;
  fechaConstitucion?: Date;
  regimenFiscal?: string;
  actaConstitutivaUrl?: string;
  poderNotarialUrl?: string;
  comprobanteDomicilioUrl?: string;
  tipoIdentificacion?: {
    id: number;
    nombre: string;
    descripcion?: string;
  };
}

export interface CreateClienteDto {
  nombre: string;
  curp: string;
  idTipoIdentificacion: number;
  numIdentificacion: string;
  fechaNacimiento: Date;
  telefono: string;
  correo: string;
  domicilio: string;
  tipoPersona: 'FÃ­sica' | 'Moral';
  razonSocial?: string;
  representanteLegal?: string;
  rfc?: string;
  fechaConstitucion?: Date;
  regimenFiscal?: string;
  actaConstitutivaUrl?: string;
  poderNotarialUrl?: string;
  comprobanteDomicilioUrl?: string;
}

export interface UpdateClienteDto {
  nombre?: string;
  curp?: string;
  idTipoIdentificacion?: number;
  numIdentificacion?: string;
  fechaNacimiento?: Date;
  telefono?: string;
  correo?: string;
  domicilio?: string;
  tipoPersona?: 'FÃ­sica' | 'Moral';
  razonSocial?: string;
  representanteLegal?: string;
  rfc?: string;
  fechaConstitucion?: Date;
  regimenFiscal?: string;
  actaConstitutivaUrl?: string;
  poderNotarialUrl?: string;
  comprobanteDomicilioUrl?: string;
}

class ClienteService {
  async getAll(): Promise<Cliente[]> {
    try {
      const response = await axios.get<Cliente[]>(`${API_URL}/clientes`);
      return response.data;
    } catch (error) {
      console.error('Error al obtener clientes:', error);
      throw error;
    }
  }

  async getById(id: number): Promise<Cliente> {
    try {
      const response = await axios.get<Cliente>(`${API_URL}/clientes/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Error al obtener cliente ${id}:`, error);
      throw error;
    }
  }

  async create(cliente: CreateClienteDto): Promise<Cliente> {
    try {
      const response = await axios.post<Cliente>(`${API_URL}/clientes`, cliente);
      return response.data;
    } catch (error) {
      console.error('Error al crear cliente:', error);
      throw error;
    }
  }

  async update(id: number, cliente: UpdateClienteDto): Promise<Cliente> {
    try {
      const response = await axios.put<Cliente>(`${API_URL}/clientes/${id}`, cliente);
      return response.data;
    } catch (error) {
      console.error(`Error al actualizar cliente ${id}:`, error);
      throw error;
    }
  }

  async delete(id: number): Promise<void> {
    try {
      await axios.delete(`${API_URL}/clientes/${id}`);
    } catch (error) {
      console.error(`Error al eliminar cliente ${id}:`, error);
      throw error;
    }
  }

  async getByIdentificacion(numIdentificacion: string): Promise<Cliente | null> {
    try {
      const response = await axios.get<Cliente[]>(`${API_URL}/clientes`, {
        params: { numIdentificacion }
      });
      return response.data[0] || null;
    } catch (error) {
      console.error(`Error al buscar cliente por identificaciÃ³n ${numIdentificacion}:`, error);
      throw error;
    }
  }

  async getByCurp(curp: string): Promise<Cliente | null> {
    try {
      const response = await axios.get<Cliente[]>(`${API_URL}/clientes`, {
        params: { curp }
      });
      return response.data[0] || null;
    } catch (error) {
      console.error(`Error al buscar cliente por CURP ${curp}:`, error);
      throw error;
    }
  }

  async getByCorreo(correo: string): Promise<Cliente | null> {
    try {
      const response = await axios.get<Cliente[]>(`${API_URL}/clientes`, {
        params: { correo }
      });
      return response.data[0] || null;
    } catch (error) {
      console.error(`Error al buscar cliente por correo ${correo}:`, error);
      throw error;
    }
  }
}

export default new ClienteService();import axios from 'axios';

const API_URL = 'http://localhost:3001';

export class CreditoService {
    private static instance: CreditoService;
    private baseUrl: string;

    private constructor() {
        this.baseUrl = `${API_URL}/api/creditos`;
    }

    public static getInstance(): CreditoService {
        if (!CreditoService.instance) {
            CreditoService.instance = new CreditoService();
        }
        return CreditoService.instance;
    }

    public async obtenerCreditos() {
        try {
            const response = await axios.get(this.baseUrl, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async obtenerCreditoPorId(id: number) {
        try {
            const response = await axios.get(`${this.baseUrl}/${id}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async obtenerCreditosPorCliente(clienteId: number) {
        try {
            const response = await axios.get(`${this.baseUrl}/cliente/${clienteId}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async crearCredito(credito: {
        clienteId: number;
        vehiculoId: number;
        montoTotal: number;
        plazo: number;
        tasaInteres: number;
        fechaInicio: Date;
        estado: string;
    }) {
        try {
            const response = await axios.post(this.baseUrl, credito, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json'
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async actualizarCredito(id: number, credito: {
        montoTotal?: number;
        plazo?: number;
        tasaInteres?: number;
        fechaInicio?: Date;
        estado?: string;
    }) {
        try {
            const response = await axios.put(`${this.baseUrl}/${id}`, credito, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json'
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async eliminarCredito(id: number) {
        try {
            const response = await axios.delete(`${this.baseUrl}/${id}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            return response.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    private handleError(error: any): Error {
        if (error.response) {
            const message = error.response.data.message || 'Error en la solicitud del crÃ©dito';
            return new Error(message);
        } else if (error.request) {
            return new Error('No se recibiÃ³ respuesta del servidor');
        } else {
            return new Error('Error al procesar la solicitud del crÃ©dito');
        }
    }
}

export const creditoService = CreditoService.getInstance();import axios from 'axios';

const API_URL = 'http://localhost:3001';

export interface Documento {
    id: number;
    nombre: string;
    tipo: string;
    url: string;
    id_empleado?: number;
    id_cliente?: number;
    id_vehiculo?: number;
    id_transaccion?: number;
    fecha_subida: Date;
    descripcion?: string;
    permisos_acceso?: string;
    estado: 'pendiente' | 'aprobado' | 'rechazado';
}

export interface CreateDocumentoDto {
    nombre: string;
    tipo: string;
    archivo: File;
    id_empleado?: number;
    id_cliente?: number;
    id_vehiculo?: number;
    id_transaccion?: number;
}

export interface UpdateDocumentoDto {
    nombre?: string;
    tipo?: string;
    archivo?: File;
    estado?: 'pendiente' | 'aprobado' | 'rechazado';
}

export interface DocumentosResponse {
    documentosPendientes: boolean;
    documentos: Documento[];
}

export interface GenerarPdfResponse {
    url: string;
    filename: string;
}

class DocumentoService {
    private baseUrl = `${API_URL}/api/documentos`;

    // MÃ©todo auxiliar para convertir URLs relativas en absolutas
    private getFullUrl(url: string): string {
        if (url.startsWith('http')) {
            return url;
        }
        return `${API_URL}${url}`;
    }

    // MÃ©todo auxiliar para procesar documentos y convertir URLs
    private processDocumento(documento: Documento): Documento {
        return {
            ...documento,
            url: this.getFullUrl(documento.url)
        };
    }

    // MÃ©todo auxiliar para procesar arrays de documentos
    private processDocumentos(documentos: Documento[]): Documento[] {
        return documentos.map(doc => this.processDocumento(doc));
    }

    async obtenerDocumentos(): Promise<Documento[]> {
        try {
            const response = await axios.get<{ data: Documento[] }>(this.baseUrl); 
            // Programar no es memorizar, no es entender hasta el Ãºltimo detalle, es saber buscar y encontrar soluciones, es entender patrones, no es malo usar IA, porque no es malo usar una calculadora, es malo no saber hacerlo sin ella.
            // Hay programadores que quizÃ¡ quieran que lo hagas asi con la mente, pero muchas veces se quedan obsoletos, la IA no te atonta, te enseÃ±a a entender patrones y a buscar soluciones, no es malo usarla, es malo no saber hacerlo sin ella.
            // Si crees que si te ponen un reto tÃ©cnico y dependiste de la IA no te asustes, antes de la entrevista, estudia, con proyectos reales, nada cambia, todos siguen los mismos patrones, solo que la IA te ayuda a encontrar soluciones mÃ¡s rÃ¡pido.
            // No te fuerces a entender todo de memoria, deja que los errores se apoderen de ti, y aprende de ellos, asÃ­ ya sabras un patrÃ³n si sale un error similar.
            // Los cursos no te enseÃ±an a programar, solo te enseÃ±an la teorÃ­a bÃ¡sica, la prÃ¡ctica la haces tu, con proyectos reales, no te asustes si no entiendes algo, es normal, todos pasamos por eso.
            // La IA puede ser tu profesor, pero no tu cerebro, no te asustes si no entiendes algo, es normal, todos pasamos por eso. 
            return this.processDocumentos(response.data.data);
        } catch (error) {
            console.error('Error al obtener documentos:', error);
            throw error;
        }
    }

    async obtenerDocumentoPorId(id: number): Promise<Documento> {
        try {
            const response = await axios.get<{ data: Documento }>(`${this.baseUrl}/${id}`);
            return this.processDocumento(response.data.data);
        } catch (error) {
            console.error(`Error al obtener documento ${id}:`, error);
            throw error;
        }
    }

    async obtenerDocumentosPorEmpleado(idEmpleado: number): Promise<DocumentosResponse> {
        try {
            const response = await axios.get<{ data: DocumentosResponse }>(
                `${this.baseUrl}/empleado/${idEmpleado}`
            );
            return {
                ...response.data.data,
                documentos: this.processDocumentos(response.data.data.documentos)
            };
        } catch (error) {
            console.error(`Error al obtener documentos del empleado ${idEmpleado}:`, error);
            throw error;
        }
    }

    async obtenerDocumentosPorTransaccion(idTransaccion: number): Promise<DocumentosResponse> {
        try {
            const response = await axios.get<{ data: DocumentosResponse }>(
                `${this.baseUrl}/transaccion/${idTransaccion}`
            );
            return {
                ...response.data.data,
                documentos: this.processDocumentos(response.data.data.documentos)
            };
        } catch (error) {
            console.error(`Error al obtener documentos de la transacciÃ³n ${idTransaccion}:`, error);
            throw error;
        }
    }

    async crearDocumento(documento: CreateDocumentoDto): Promise<Documento> {
        try {
            const formData = new FormData();
            formData.append('nombre', documento.nombre);
            formData.append('tipo', documento.tipo);
            formData.append('archivo', documento.archivo);
            if (documento.id_empleado) formData.append('id_empleado', documento.id_empleado.toString());
            if (documento.id_cliente) formData.append('id_cliente', documento.id_cliente.toString());
            if (documento.id_vehiculo) formData.append('id_vehiculo', documento.id_vehiculo.toString());
            if (documento.id_transaccion) formData.append('id_transaccion', documento.id_transaccion.toString());

            const response = await axios.post<{ data: Documento }>(this.baseUrl, formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });
            return this.processDocumento(response.data.data);
        } catch (error) {
            console.error('Error al crear documento:', error);
            throw error;
        }
    }

    async actualizarDocumento(id: number, documento: UpdateDocumentoDto): Promise<Documento> {
        try {
            const formData = new FormData();
            if (documento.nombre) formData.append('nombre', documento.nombre);
            if (documento.tipo) formData.append('tipo', documento.tipo);
            if (documento.archivo) formData.append('archivo', documento.archivo);
            if (documento.estado) formData.append('estado', documento.estado);

            const response = await axios.put<{ data: Documento }>(`${this.baseUrl}/${id}`, formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });
            return this.processDocumento(response.data.data);
        } catch (error) {
            console.error(`Error al actualizar documento ${id}:`, error);
            throw error;
        }
    }

    async aprobarDocumento(id: number): Promise<Documento> {
        try {
            const response = await axios.post<{ data: Documento }>(`${this.baseUrl}/${id}/aprobar`);
            return this.processDocumento(response.data.data);
        } catch (error) {
            console.error(`Error al aprobar documento ${id}:`, error);
            throw error;
        }
    }

    async rechazarDocumento(id: number): Promise<Documento> {
        try {
            const response = await axios.post<{ data: Documento }>(`${this.baseUrl}/${id}/rechazar`);
            return this.processDocumento(response.data.data);
        } catch (error) {
            console.error(`Error al rechazar documento ${id}:`, error);
            throw error;
        }
    }

    async eliminarDocumento(id: number): Promise<void> {
        try {
            await axios.delete(`${this.baseUrl}/${id}`);
        } catch (error) {
            console.error(`Error al eliminar documento ${id}:`, error);
            throw error;
        }
    }

    async generarCompraVentaPdf(idTransaccion: number): Promise<GenerarPdfResponse> {
        try {
            const response = await axios.post<{ data: GenerarPdfResponse }>(
                `${this.baseUrl}/generar-compraventa/${idTransaccion}`
            );
            return {
                ...response.data.data,
                url: this.getFullUrl(response.data.data.url)
            };
        } catch (error) {
            console.error(`Error al generar PDF de compraventa para transacciÃ³n ${idTransaccion}:`, error);
            throw error;
        }
    }

    async escanearDocumentos(idTransaccion: number, archivos: File[]): Promise<Documento[]> {
        try {
            const formData = new FormData();
            archivos.forEach((archivo, index) => {
                formData.append(`archivos[${index}]`, archivo);
            });
            formData.append('id_transaccion', idTransaccion.toString());

            const response = await axios.post<{ data: Documento[] }>(
                `${this.baseUrl}/escanear/${idTransaccion}`,
                formData,
                {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                }
            );
            return this.processDocumentos(response.data.data);
        } catch (error) {
            console.error(`Error al escanear documentos para transacciÃ³n ${idTransaccion}:`, error);
            throw error;
        }
    }

    async validarFirma(idDocumento: number): Promise<boolean> {
        try {
            const response = await axios.post<{ data: { valida: boolean } }>(
                `${this.baseUrl}/validar-firma/${idDocumento}`
            );
            return response.data.data.valida;
        } catch (error) {
            console.error(`Error al validar firma del documento ${idDocumento}:`, error);
            throw error;
        }
    }
}

export const documentoService = new DocumentoService();
export default documentoService;const API_URL = 'http://localhost:3001';

export interface IUsuarioEmpleado {
    correo: string;
    id_rol: number;
    password?: string;
    username?: string;
    is_active?: boolean;
    is_locked?: boolean;
    auth_provider?: string;
    auth_provider_id?: string;
    two_factor_enabled?: boolean;
    two_factor_secret?: string;
}

export interface IEmpleado {
    id_empleado?: number;
    id_usuario?: number;
    id_tipo_identificacion: number;
    nombre: string;
    num_identificacion: string;
    fecha_nacimiento: Date;
    telefono: string;
    curp: string;
    domicilio: string;
    fecha_contratacion: Date;
    num_empleado?: string;
    usuario?: IUsuarioEmpleado;
    tipoIdentificacion?: {
        id_tipo_identificacion: number;
        nombre: string;
        descripcion?: string;
    };
}

interface ApiResponse<T> {
    success: boolean;
    data: T;
    message: string;
}

export class EmpleadoService {
    private static instance: EmpleadoService;
    private baseUrl: string;

    private constructor() {
        this.baseUrl = `${API_URL}/api/empleados`;
    }

    public static getInstance(): EmpleadoService {
        if (!EmpleadoService.instance) {
            EmpleadoService.instance = new EmpleadoService();
        }
        return EmpleadoService.instance;
    }

    private getAuthHeaders(): HeadersInit {
        const token = localStorage.getItem('token');
        return {
            'Authorization': `Bearer ${token || ''}`,
            'Content-Type': 'application/json'
        };
    }

    public async obtenerEmpleados(): Promise<IEmpleado[]> {
        try {
            const response = await fetch(this.baseUrl, {
                headers: this.getAuthHeaders()
            });
            await this.handleResponseErrors(response);
            const result: ApiResponse<IEmpleado[]> = await response.json();
            return result.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async obtenerEmpleadoPorId(id: number): Promise<IEmpleado> {
        try {
            const response = await fetch(`${this.baseUrl}/${id}`, {
                headers: this.getAuthHeaders()
            });
            await this.handleResponseErrors(response);
            const result: ApiResponse<IEmpleado> = await response.json();
            return result.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async crearEmpleado(data: { 
        usuario: IUsuarioEmpleado; 
        empleado: Omit<IEmpleado, 'id_empleado' | 'id_usuario' | 'usuario' | 'tipoIdentificacion'> 
    }): Promise<IEmpleado> {
        try {
            const response = await fetch(this.baseUrl, {
                method: 'POST',
                headers: this.getAuthHeaders(),
                body: JSON.stringify(data)
            });
            await this.handleResponseErrors(response);
            const result: ApiResponse<IEmpleado> = await response.json();
            return result.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async actualizarEmpleado(
        id: number,
        data: {
            usuario?: Partial<IUsuarioEmpleado>;
            empleado?: Partial<Omit<IEmpleado, 'id_empleado' | 'id_usuario' | 'usuario' | 'tipoIdentificacion'>>;
        }
    ): Promise<IEmpleado> {
        try {
            const response = await fetch(`${this.baseUrl}/${id}`, {
                method: 'PUT',
                headers: this.getAuthHeaders(),
                body: JSON.stringify(data)
            });
            await this.handleResponseErrors(response);
            const result: ApiResponse<IEmpleado> = await response.json();
            return result.data;
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async desactivarEmpleado(id: number): Promise<void> {
        try {
            const response = await fetch(`${this.baseUrl}/${id}/desactivar`, {
                method: 'PUT',
                headers: this.getAuthHeaders()
            });
            await this.handleResponseErrors(response);
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async reactivarEmpleado(id: number): Promise<void> {
        try {
            const response = await fetch(`${this.baseUrl}/${id}/reactivar`, {
                method: 'PUT',
                headers: this.getAuthHeaders()
            });
            await this.handleResponseErrors(response);
        } catch (error) {
            throw this.handleError(error);
        }
    }

    public async cambiarPassword(
        id: number,
        passwords: { passwordActual: string; passwordNuevo: string; confirmarPassword: string }
    ): Promise<void> {
        try {
            const response = await fetch(`${this.baseUrl}/${id}/password`, {
                method: 'PUT',
                headers: this.getAuthHeaders(),
                body: JSON.stringify(passwords)
            });
            await this.handleResponseErrors(response);
        } catch (error) {
            throw this.handleError(error);
        }
    }

    private async handleResponseErrors(response: Response) {
        if (!response.ok) {
            let errorMessage = 'Error en la solicitud del empleado';
            try {
                const errorData = await response.json();
                if (errorData && errorData.message) {
                    errorMessage = errorData.message;
                }
            } catch {
                // Si no se puede parsear JSON, dejamos el mensaje por defecto
            }
            throw new Error(errorMessage);
        }
    }

    private handleError(error: any): Error {
        if (error instanceof Error) {
            return error;
        }
        return new Error('Error desconocido al procesar la solicitud del empleado');
    }
}

export const empleadoService = EmpleadoService.getInstance();import axios from 'axios';

interface IpifyResponse {
  ip: string;
}

interface CloudflareTraceResponse {
  ip: string;
  ts: string;
  visit_scheme: string;
  uag: string;
  colo: string;
  http: string;
  loc: string;
  tls: string;
  sni: string;
  warp: string;
  gateway: string;
}

class IpService {
  private cachedIp: string = '0.0.0.0';

  async getClientIp(): Promise<string> {
    if (this.cachedIp !== '0.0.0.0') {
      return this.cachedIp;
    }

    try {
      // Usar ipify con CORS habilitado
      const response = await axios.get<IpifyResponse>('https://api64.ipify.org?format=json');
      if (response.data?.ip) {
        this.cachedIp = response.data.ip;
        return this.cachedIp;
      }
      throw new Error('No IP encontrada en la respuesta de ipify');
    } catch (error) {
      console.error('Error al obtener IP de ipify:', error);
      
      try {
        // Fallback a cloudflare trace que tiene CORS habilitado
        const response = await axios.get<string>('https://1.1.1.1/cdn-cgi/trace');
        const lines = response.data.split('\n');
        const data = lines.reduce<Partial<CloudflareTraceResponse>>((obj, line) => {
          const [key, value] = line.split('=');
          if (key && value) {
            obj[key as keyof CloudflareTraceResponse] = value;
          }
          return obj;
        }, {});
        
        if (data.ip) {
          this.cachedIp = data.ip;
          return this.cachedIp;
        }
        throw new Error('No IP encontrada en la respuesta del fallback');
      } catch (error) {
        console.error('Error al obtener IP del fallback:', error);
        return '0.0.0.0';
      }
    }
  }

  clearCache(): void {
    this.cachedIp = '0.0.0.0';
  }
}

export const ipService = new IpService();import axios from 'axios';

const API_URL = 'http://localhost:3001';

export interface RolUsuario {
  id: number;
  nombre: string;
}

interface ApiResponse<T> {
  success: boolean;
  data: T;
  message: string;
}

class RolUsuarioService {
  private baseUrl = `${API_URL}/catalogs/rol-usuario`;

  async getAll(): Promise<RolUsuario[]> {
    try {
      const response = await axios.get<ApiResponse<RolUsuario[]>>(this.baseUrl);
      return response.data.data;
    } catch (error) {
      console.error('Error al obtener roles de usuario:', error);
      throw error;
    }
  }

  async getById(id: number): Promise<RolUsuario> {
    try {
      const response = await axios.get<ApiResponse<RolUsuario>>(`${this.baseUrl}/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`Error al obtener rol de usuario ${id}:`, error);
      throw error;
    }
  }
}

export const rolUsuarioService = new RolUsuarioService();
export default rolUsuarioService;import axios from 'axios';
import { TipoDocumento } from '../types/documento.types';

const API_URL = 'http://localhost:3001/api'; // AQUI LA API DONDE ENTRARA AL BACKEND 

interface ScanResponse {
  message: string;
  documentId?: number;
  url?: string;
}
  
interface ScannerConfig {
  scannerIp: string;
  snmpCommunity: string;
  uploadPath: string;
}

interface ScanOptions {
  resolution?: number;
  colorMode?: 'Color' | 'Gris' | 'ByN';
  paperSize?: string;
  outputFormat?: 'PDF' | 'JPG' | 'PNG';
  duplex?: boolean;
  brightness?: number;
  contrast?: number;
  documentId?: number;
  clienteId?: number;
  tipoDocumento?: TipoDocumento;
}

interface ScannerStatus {
  status: 'READY' | 'BUSY' | 'ERROR' | 'OFFLINE' | 'PAPER_JAM';
  message?: string;
}

interface ConnectionTestResult {
  connected: boolean;
  status: string;
  message: string;
}

class ScannerService {
  private static instance: ScannerService;

  private constructor() {}

  public static getInstance(): ScannerService {
    if (!ScannerService.instance) {
      ScannerService.instance = new ScannerService();
    }
    return ScannerService.instance;
  }

  /**
   * Obtiene el estado actual del escÃ¡ner
   */
  async getStatus(): Promise<ScannerStatus> {
    const response = await axios.get<ScannerStatus>(`${API_URL}/status`);
    return response.data;
  }

  /**
   * Inicia un nuevo escaneo con las opciones especificadas
   */
  async startScan(options: ScanOptions): Promise<ScanResponse> {
    const response = await axios.post<ScanResponse>(`${API_URL}/scan`, options);
    return response.data;
  }

  /**
   * Configura los parÃ¡metros del escÃ¡ner
   */
  async configure(): Promise<ScannerConfig> {
    const response = await axios.post<ScannerConfig>(`${API_URL}/configure`);
    return response.data;
  }

  /**
   * Prueba la conexiÃ³n con el escÃ¡ner
   */
  async testConnection(): Promise<ConnectionTestResult> {
    const response = await axios.get<ConnectionTestResult>(`${API_URL}/test-connection`);
    return response.data;
  }

  /**
   * Escanea un documento y lo asocia directamente a un cliente o documento existente
   */
  async scanToDocument(options: {
    documentId: number;
    clienteId: number;
    tipoDocumento: TipoDocumento;
    resolution?: number;
    colorMode?: 'Color' | 'Gris' | 'ByN';
  }): Promise<ScanResponse> {
    const response = await axios.post<ScanResponse>(`${API_URL}/scan`, {
      ...options,
      outputFormat: 'PDF', // Forzar PDF para documentos
      paperSize: 'A4', // TamaÃ±o por defecto
    });
    return response.data;
  }

  /**
   * Verifica si el escÃ¡ner estÃ¡ disponible y listo para usar
   */
  async isReady(): Promise<boolean> {
    try {
      const { status } = await this.getStatus();
      return status === 'READY';
    } catch {
      return false;
    }
  }

  /**
   * Obtiene la URL del documento escaneado
   */
  getDocumentUrl(documentId: number): string {
    return `/uploads/scanner/${documentId}`;
  }
}

export const scannerService = ScannerService.getInstance();import axios from 'axios';

const API_URL = 'http://localhost:3001/api';

export interface TipoIdentificacion {
  id: number;
  nombre: string;
  descripcion?: string;
}

interface ApiResponse<T> {
  success: boolean;
  data: T;
  message: string;
}

class TipoIdentificacionService {
  private baseUrl = `${API_URL}/catalogs/tipos-identificacion`;

  private getAuthHeader() {
    const token = localStorage.getItem('token');
    return token ? { Authorization: `Bearer ${token}` } : {};
  }

  async getAll(): Promise<TipoIdentificacion[]> {
    try {
      const response = await axios.get<ApiResponse<TipoIdentificacion[]>>(
        this.baseUrl,
        { headers: this.getAuthHeader() }
      );
      return response.data.data;
    } catch (error) {
      console.error('Error al obtener tipos de identificaciÃ³n:', error);
      throw error;
    }
  }

  async getById(id: number): Promise<TipoIdentificacion> {
    try {
      const response = await axios.get<ApiResponse<TipoIdentificacion>>(
        `${this.baseUrl}/${id}`,
        { headers: this.getAuthHeader() }
      );
      return response.data.data;
    } catch (error) {
      console.error(`Error al obtener tipo de identificaciÃ³n ${id}:`, error);
      throw error;
    }
  }
}

export const tipoIdentificacionService = new TipoIdentificacionService();
export default tipoIdentificacionService;import axios from 'axios';
import { TipoTransaccion, ApiResponse } from '../types';

const API_URL = 'http://localhost:3001';

class TipoTransaccionService {
  private baseUrl = `${API_URL}/catalogs/tipo-transaccion`;

  async getAll(): Promise<TipoTransaccion[]> {
    try {
      const response = await axios.get<ApiResponse<TipoTransaccion[]>>(this.baseUrl);
      return response.data.data;
    } catch (error) {
      console.error('Error al obtener tipos de transacciÃ³n:', error);
      throw error;
    }
  }

  async getById(id: number): Promise<TipoTransaccion> {
    try {
      const response = await axios.get<ApiResponse<TipoTransaccion>>(`${this.baseUrl}/${id}`);
      return response.data.data;
    } catch (error) {
      console.error('Error al obtener tipo de transacciÃ³n:', error);
      throw error;
    }
  }

  async create(nombre: string): Promise<TipoTransaccion> {
    try {
      const response = await axios.post<ApiResponse<TipoTransaccion>>(this.baseUrl, { nombre });
      return response.data.data;
    } catch (error) {
      console.error('Error al crear tipo de transacciÃ³n:', error);
      throw error;
    }
  }

  async update(id: number, nombre: string): Promise<TipoTransaccion> {
    try {
      const response = await axios.put<ApiResponse<TipoTransaccion>>(`${this.baseUrl}/${id}`, { nombre });
      return response.data.data;
    } catch (error) {
      console.error('Error al actualizar tipo de transacciÃ³n:', error);
      throw error;
    }
  }

  async delete(id: number): Promise<void> {
    try {
      await axios.delete(`${this.baseUrl}/${id}`);
    } catch (error) {
      console.error('Error al eliminar tipo de transacciÃ³n:', error);
      throw error;
    }
  }
}

export const tipoTransaccionService = new TipoTransaccionService();
export default tipoTransaccionService;import axios from 'axios';

const API_URL = 'http://localhost:3001';

export interface Transaccion {
  id: number;
  fecha: Date;
  idUsuario: number;
  idCliente: number;
  idVehiculo: number;
  idCredito?: number;
  idTipoTransaccion: number;
  usuario?: {
    id: number;
    nombre: string;
  };
  cliente?: {
    id: number;
    nombre: string;
  };
  vehiculo?: {
    id: number;
    marca: string;
    modelo: string;
    anio: number;
    precio: number;
  };
  credito?: {
    id: number;
    cantidad: number;
  };
  tipoTransaccion?: {
    id: number;
    nombre: string;
  };
}

export interface CreateTransaccionDto {
  idUsuario: number;
  idCliente: number;
  idVehiculo: number;
  idCredito?: number;
  idTipoTransaccion: number;
}

export interface UpdateTransaccionDto {
  idUsuario?: number;
  idCliente?: number;
  idVehiculo?: number;
  idCredito?: number;
  idTipoTransaccion?: number;
}

class TransaccionService {
  async getAll(): Promise<Transaccion[]> {
    try {
      const response = await axios.get<Transaccion[]>(`${API_URL}/transacciones`);
      return response.data;
    } catch (error) {
      console.error('Error al obtener transacciones:', error);
      throw error;
    }
  }

  async getById(id: number): Promise<Transaccion> {
    try {
      const response = await axios.get<Transaccion>(`${API_URL}/transacciones/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Error al obtener transacciÃ³n ${id}:`, error);
      throw error;
    }
  }

  async create(transaccion: CreateTransaccionDto): Promise<Transaccion> {
    try {
      const response = await axios.post<Transaccion>(`${API_URL}/transacciones`, transaccion);
      return response.data;
    } catch (error) {
      console.error('Error al crear transacciÃ³n:', error);
      throw error;
    }
  }

  async update(id: number, transaccion: UpdateTransaccionDto): Promise<Transaccion> {
    try {
      const response = await axios.put<Transaccion>(`${API_URL}/transacciones/${id}`, transaccion);
      return response.data;
    } catch (error) {
      console.error(`Error al actualizar transacciÃ³n ${id}:`, error);
      throw error;
    }
  }

  async delete(id: number): Promise<void> {
    try {
      await axios.delete(`${API_URL}/transacciones/${id}`);
    } catch (error) {
      console.error(`Error al eliminar transacciÃ³n ${id}:`, error);
      throw error;
    }
  }
}

export default new TransaccionService();import axios from 'axios';

const API_URL = 'http://localhost:3001';

export interface Vehiculo {
    id_vehiculo: number;
    marca: string;
    modelo: string;
    anio: number;
    precio: number;
    num_serie: string;
    color: string;
    num_motor: string;
    num_factura?: string;
    placas?: string;
    tarjeta_circulacion?: string;
    comentarios_internos?: string;
}

export interface CreateVehiculoDto {
    marca: string;
    modelo: string;
    anio: number;
    precio: number;
    num_serie: string;
    color: string;
    num_motor: string;
    num_factura?: string;
    placas?: string;
    tarjeta_circulacion?: string;
    comentarios_internos?: string;
}

export interface UpdateVehiculoDto {
    marca?: string;
    modelo?: string;
    anio?: number;
    precio?: number;
    num_serie?: string;
    color?: string;
    num_motor?: string;
    num_factura?: string;
    placas?: string;
    tarjeta_circulacion?: string;
    comentarios_internos?: string;
}

// FunciÃ³n para transformar de snake_case a camelCase
const toBackendFormat = (data: any) => {
    const transformed: any = {};
    Object.entries(data).forEach(([key, value]) => {
        const newKey = key.replace(/_([a-z])/g, (g) => g[1].toUpperCase());
        transformed[newKey] = value;
    });
    return transformed;
};

// FunciÃ³n para transformar de camelCase a snake_case
const toFrontendFormat = (data: any) => {
    const transformed: any = {};
    Object.entries(data).forEach(([key, value]) => {
        const newKey = key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
        transformed[newKey] = value;
    });
    return transformed;
};

class VehiculoService {
    async getAll(): Promise<Vehiculo[]> {
        try {
            const response = await axios.get<any[]>(`${API_URL}/vehiculos`);
            return response.data.map(vehiculo => toFrontendFormat(vehiculo));
        } catch (error) {
            console.error('Error al obtener vehÃ­culos:', error);
            throw error;
        }
    }

    async getById(id: number): Promise<Vehiculo> {
        try {
            const response = await axios.get<any>(`${API_URL}/vehiculos/${id}`);
            return toFrontendFormat(response.data);
        } catch (error) {
            console.error(`Error al obtener vehÃ­culo ${id}:`, error);
            throw error;
        }
    }

    async create(vehiculo: CreateVehiculoDto): Promise<Vehiculo> {
        try {
            const response = await axios.post<any>(
                `${API_URL}/vehiculos`,
                toBackendFormat(vehiculo)
            );
            return toFrontendFormat(response.data);
        } catch (error) {
            console.error('Error al crear vehÃ­culo:', error);
            throw error;
        }
    }

    async update(id: number, vehiculo: UpdateVehiculoDto): Promise<Vehiculo> {
        try {
            const response = await axios.put<any>(
                `${API_URL}/vehiculos/${id}`,
                toBackendFormat(vehiculo)
            );
            return toFrontendFormat(response.data);
        } catch (error) {
            console.error(`Error al actualizar vehÃ­culo ${id}:`, error);
            throw error;
        }
    }

    async delete(id: number): Promise<void> {
        try {
            await axios.delete(`${API_URL}/vehiculos/${id}`);
        } catch (error) {
            console.error(`Error al eliminar vehÃ­culo ${id}:`, error);
            throw error;
        }
    }

    async getByNumSerie(numSerie: string): Promise<Vehiculo | null> {
        try {
            const response = await axios.get<any[]>(`${API_URL}/vehiculos`, {
                params: { numSerie: toBackendFormat({ num_serie: numSerie }).numSerie }
            });
            return response.data[0] ? toFrontendFormat(response.data[0]) : null;
        } catch (error) {
            console.error(`Error al buscar vehÃ­culo por nÃºmero de serie ${numSerie}:`, error);
            throw error;
        }
    }

    async getByPlacas(placas: string): Promise<Vehiculo | null> {
        try {
            const response = await axios.get<any[]>(`${API_URL}/vehiculos`, {
                params: { placas }
            });
            return response.data[0] ? toFrontendFormat(response.data[0]) : null;
        } catch (error) {
            console.error(`Error al buscar vehÃ­culo por placas ${placas}:`, error);
            throw error;
        }
    }

    async getByNumMotor(numMotor: string): Promise<Vehiculo | null> {
        try {
            const response = await axios.get<any[]>(`${API_URL}/vehiculos`, {
                params: { numMotor: toBackendFormat({ num_motor: numMotor }).numMotor }
            });
            return response.data[0] ? toFrontendFormat(response.data[0]) : null;
        } catch (error) {
            console.error(`Error al buscar vehÃ­culo por nÃºmero de motor ${numMotor}:`, error);
            throw error;
        }
    }
}

export default new VehiculoService();